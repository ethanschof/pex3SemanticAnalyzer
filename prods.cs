/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class PConstant : Node
{
}

public abstract class PFunctions : Node
{
}

public abstract class PFunction : Node
{
}

public abstract class PParams : Node
{
}

public abstract class PParam : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PDeclareStatement : Node
{
}

public abstract class PAssignStatement : Node
{
}

public abstract class PFunctionCallStatement : Node
{
}

public abstract class PActualParameters : Node
{
}

public abstract class PActualParam : Node
{
}

public abstract class PIfStatement : Node
{
}

public abstract class PWhileStatement : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExpression2 : Node
{
}

public abstract class PExpression3 : Node
{
}

public abstract class PExpression4 : Node
{
}

public abstract class PExpressionMath1 : Node
{
}

public abstract class PExpressionMath2 : Node
{
}

public abstract class PExpressionMath3 : Node
{
}

public abstract class PExpressionMath4 : Node
{
}

public abstract class POperand : Node
{
}


public sealed class AProgram : PProgram
{
    private PConstants _constants_;
    private PFunctions _functions_;
    private TMainDef _main_def_;
    private TOpenBracket _open_bracket_;
    private PStatements _statements_;
    private TCloseBracket _close_bracket_;

    public AProgram ()
    {
    }

    public AProgram (
            PConstants _constants_,
            PFunctions _functions_,
            TMainDef _main_def_,
            TOpenBracket _open_bracket_,
            PStatements _statements_,
            TCloseBracket _close_bracket_
    )
    {
        SetConstants (_constants_);
        SetFunctions (_functions_);
        SetMainDef (_main_def_);
        SetOpenBracket (_open_bracket_);
        SetStatements (_statements_);
        SetCloseBracket (_close_bracket_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PConstants)CloneNode (_constants_),
            (PFunctions)CloneNode (_functions_),
            (TMainDef)CloneNode (_main_def_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (PStatements)CloneNode (_statements_),
            (TCloseBracket)CloneNode (_close_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (PFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }
    public TMainDef GetMainDef ()
    {
        return _main_def_;
    }

    public void SetMainDef (TMainDef node)
    {
        if(_main_def_ != null)
        {
            _main_def_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_def_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_functions_)
            + ToString (_main_def_)
            + ToString (_open_bracket_)
            + ToString (_statements_)
            + ToString (_close_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
        if ( _main_def_ == child )
        {
            _main_def_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _functions_ == oldChild )
        {
            SetFunctions ((PFunctions) newChild);
            return;
        }
        if ( _main_def_ == oldChild )
        {
            SetMainDef ((TMainDef) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
    }

}
public sealed class AMultipleConstantsConstants : PConstants
{
    private PConstant _constant_;
    private PConstants _constants_;

    public AMultipleConstantsConstants ()
    {
    }

    public AMultipleConstantsConstants (
            PConstant _constant_,
            PConstants _constants_
    )
    {
        SetConstant (_constant_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new AMultipleConstantsConstants (
            (PConstant)CloneNode (_constant_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleConstantsConstants(this);
    }

    public PConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (PConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_ == oldChild )
        {
            SetConstant ((PConstant) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class ANoConstantsConstants : PConstants
{


    public ANoConstantsConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoConstantsConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoConstantsConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AConstantDeclareConstant : PConstant
{
    private TDefine _define_;
    private TId _type_;
    private TId _varname_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TEol _eol_;

    public AConstantDeclareConstant ()
    {
    }

    public AConstantDeclareConstant (
            TDefine _define_,
            TId _type_,
            TId _varname_,
            TAssign _assign_,
            PExpression _expression_,
            TEol _eol_
    )
    {
        SetDefine (_define_);
        SetType (_type_);
        SetVarname (_varname_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AConstantDeclareConstant (
            (TDefine)CloneNode (_define_),
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantDeclareConstant(this);
    }

    public TDefine GetDefine ()
    {
        return _define_;
    }

    public void SetDefine (TDefine node)
    {
        if(_define_ != null)
        {
            _define_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _define_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_define_)
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _define_ == child )
        {
            _define_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _define_ == oldChild )
        {
            SetDefine ((TDefine) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMultipleFunctionsFunctions : PFunctions
{
    private PFunction _function_;
    private PFunctions _functions_;

    public AMultipleFunctionsFunctions ()
    {
    }

    public AMultipleFunctionsFunctions (
            PFunction _function_,
            PFunctions _functions_
    )
    {
        SetFunction (_function_);
        SetFunctions (_functions_);
    }

    public override Object Clone()
    {
        return new AMultipleFunctionsFunctions (
            (PFunction)CloneNode (_function_),
            (PFunctions)CloneNode (_functions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleFunctionsFunctions(this);
    }

    public PFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (PFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public PFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (PFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_)
            + ToString (_functions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_ == oldChild )
        {
            SetFunction ((PFunction) newChild);
            return;
        }
        if ( _functions_ == oldChild )
        {
            SetFunctions ((PFunctions) newChild);
            return;
        }
    }

}
public sealed class ANoFunctionsFunctions : PFunctions
{


    public ANoFunctionsFunctions (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoFunctionsFunctions (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoFunctionsFunctions(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFunction : PFunction
{
    private TFunc _func_;
    private TId _id_;
    private TOpenParenthesis _open_parenthesis_;
    private PParams _params_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBracket _open_bracket_;
    private PStatements _statements_;
    private TCloseBracket _close_bracket_;

    public AFunction ()
    {
    }

    public AFunction (
            TFunc _func_,
            TId _id_,
            TOpenParenthesis _open_parenthesis_,
            PParams _params_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBracket _open_bracket_,
            PStatements _statements_,
            TCloseBracket _close_bracket_
    )
    {
        SetFunc (_func_);
        SetId (_id_);
        SetOpenParenthesis (_open_parenthesis_);
        SetParams (_params_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBracket (_open_bracket_);
        SetStatements (_statements_);
        SetCloseBracket (_close_bracket_);
    }

    public override Object Clone()
    {
        return new AFunction (
            (TFunc)CloneNode (_func_),
            (TId)CloneNode (_id_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PParams)CloneNode (_params_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (PStatements)CloneNode (_statements_),
            (TCloseBracket)CloneNode (_close_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunction(this);
    }

    public TFunc GetFunc ()
    {
        return _func_;
    }

    public void SetFunc (TFunc node)
    {
        if(_func_ != null)
        {
            _func_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _func_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PParams GetParams ()
    {
        return _params_;
    }

    public void SetParams (PParams node)
    {
        if(_params_ != null)
        {
            _params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_func_)
            + ToString (_id_)
            + ToString (_open_parenthesis_)
            + ToString (_params_)
            + ToString (_close_parenthesis_)
            + ToString (_open_bracket_)
            + ToString (_statements_)
            + ToString (_close_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _func_ == child )
        {
            _func_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _params_ == child )
        {
            _params_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _func_ == oldChild )
        {
            SetFunc ((TFunc) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _params_ == oldChild )
        {
            SetParams ((PParams) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
    }

}
public sealed class AManyParams : PParams
{
    private PParam _param_;
    private TComma _comma_;
    private PParams _params_;

    public AManyParams ()
    {
    }

    public AManyParams (
            PParam _param_,
            TComma _comma_,
            PParams _params_
    )
    {
        SetParam (_param_);
        SetComma (_comma_);
        SetParams (_params_);
    }

    public override Object Clone()
    {
        return new AManyParams (
            (PParam)CloneNode (_param_),
            (TComma)CloneNode (_comma_),
            (PParams)CloneNode (_params_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAManyParams(this);
    }

    public PParam GetParam ()
    {
        return _param_;
    }

    public void SetParam (PParam node)
    {
        if(_param_ != null)
        {
            _param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParams GetParams ()
    {
        return _params_;
    }

    public void SetParams (PParams node)
    {
        if(_params_ != null)
        {
            _params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_param_)
            + ToString (_comma_)
            + ToString (_params_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _param_ == child )
        {
            _param_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _params_ == child )
        {
            _params_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _param_ == oldChild )
        {
            SetParam ((PParam) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _params_ == oldChild )
        {
            SetParams ((PParams) newChild);
            return;
        }
    }

}
public sealed class AOneParams : PParams
{
    private PParam _param_;

    public AOneParams ()
    {
    }

    public AOneParams (
            PParam _param_
    )
    {
        SetParam (_param_);
    }

    public override Object Clone()
    {
        return new AOneParams (
            (PParam)CloneNode (_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneParams(this);
    }

    public PParam GetParam ()
    {
        return _param_;
    }

    public void SetParam (PParam node)
    {
        if(_param_ != null)
        {
            _param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _param_ == child )
        {
            _param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _param_ == oldChild )
        {
            SetParam ((PParam) newChild);
            return;
        }
    }

}
public sealed class AOneParamParam : PParam
{
    private TId _type_;
    private TId _varname_;

    public AOneParamParam ()
    {
    }

    public AOneParamParam (
            TId _type_,
            TId _varname_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
    }

    public override Object Clone()
    {
        return new AOneParamParam (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneParamParam(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
    }

}
public sealed class ANoParamParam : PParam
{


    public ANoParamParam (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoParamParam (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoParamParam(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AMultipleStatements : PStatements
{
    private PStatement _statement_;
    private PStatements _statements_;

    public AMultipleStatements ()
    {
    }

    public AMultipleStatements (
            PStatement _statement_,
            PStatements _statements_
    )
    {
        SetStatement (_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AMultipleStatements (
            (PStatement)CloneNode (_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class ANoStatementsStatements : PStatements
{


    public ANoStatementsStatements (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoStatementsStatements (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoStatementsStatements(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignStatement _assign_statement_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignStatement _assign_statement_
    )
    {
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class ADeclarationStatement : PStatement
{
    private PDeclareStatement _declare_statement_;

    public ADeclarationStatement ()
    {
    }

    public ADeclarationStatement (
            PDeclareStatement _declare_statement_
    )
    {
        SetDeclareStatement (_declare_statement_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatement (
            (PDeclareStatement)CloneNode (_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatement(this);
    }

    public PDeclareStatement GetDeclareStatement ()
    {
        return _declare_statement_;
    }

    public void SetDeclareStatement (PDeclareStatement node)
    {
        if(_declare_statement_ != null)
        {
            _declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declare_statement_ == child )
        {
            _declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declare_statement_ == oldChild )
        {
            SetDeclareStatement ((PDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class AFuncCallStatement : PStatement
{
    private PFunctionCallStatement _function_call_statement_;

    public AFuncCallStatement ()
    {
    }

    public AFuncCallStatement (
            PFunctionCallStatement _function_call_statement_
    )
    {
        SetFunctionCallStatement (_function_call_statement_);
    }

    public override Object Clone()
    {
        return new AFuncCallStatement (
            (PFunctionCallStatement)CloneNode (_function_call_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFuncCallStatement(this);
    }

    public PFunctionCallStatement GetFunctionCallStatement ()
    {
        return _function_call_statement_;
    }

    public void SetFunctionCallStatement (PFunctionCallStatement node)
    {
        if(_function_call_statement_ != null)
        {
            _function_call_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_call_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_call_statement_ == child )
        {
            _function_call_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_call_statement_ == oldChild )
        {
            SetFunctionCallStatement ((PFunctionCallStatement) newChild);
            return;
        }
    }

}
public sealed class AIfstateStatement : PStatement
{
    private PIfStatement _if_statement_;

    public AIfstateStatement ()
    {
    }

    public AIfstateStatement (
            PIfStatement _if_statement_
    )
    {
        SetIfStatement (_if_statement_);
    }

    public override Object Clone()
    {
        return new AIfstateStatement (
            (PIfStatement)CloneNode (_if_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfstateStatement(this);
    }

    public PIfStatement GetIfStatement ()
    {
        return _if_statement_;
    }

    public void SetIfStatement (PIfStatement node)
    {
        if(_if_statement_ != null)
        {
            _if_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_statement_ == child )
        {
            _if_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_statement_ == oldChild )
        {
            SetIfStatement ((PIfStatement) newChild);
            return;
        }
    }

}
public sealed class AWhileLoopStatement : PStatement
{
    private PWhileStatement _while_statement_;

    public AWhileLoopStatement ()
    {
    }

    public AWhileLoopStatement (
            PWhileStatement _while_statement_
    )
    {
        SetWhileStatement (_while_statement_);
    }

    public override Object Clone()
    {
        return new AWhileLoopStatement (
            (PWhileStatement)CloneNode (_while_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileLoopStatement(this);
    }

    public PWhileStatement GetWhileStatement ()
    {
        return _while_statement_;
    }

    public void SetWhileStatement (PWhileStatement node)
    {
        if(_while_statement_ != null)
        {
            _while_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_statement_ == child )
        {
            _while_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_statement_ == oldChild )
        {
            SetWhileStatement ((PWhileStatement) newChild);
            return;
        }
    }

}
public sealed class ADeclareStatement : PDeclareStatement
{
    private TId _type_;
    private TId _varname_;
    private TEol _eol_;

    public ADeclareStatement ()
    {
    }

    public ADeclareStatement (
            TId _type_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclareStatement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareStatement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AAssignStatement : PAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TEol _eol_;

    public AAssignStatement ()
    {
    }

    public AAssignStatement (
            TId _id_,
            TAssign _assign_,
            PExpression _expression_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctionCallStatement : PFunctionCallStatement
{
    private TId _id_;
    private TOpenParenthesis _open_parenthesis_;
    private PActualParameters _actual_parameters_;
    private TCloseParenthesis _close_parenthesis_;
    private TEol _eol_;

    public AFunctionCallStatement ()
    {
    }

    public AFunctionCallStatement (
            TId _id_,
            TOpenParenthesis _open_parenthesis_,
            PActualParameters _actual_parameters_,
            TCloseParenthesis _close_parenthesis_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetOpenParenthesis (_open_parenthesis_);
        SetActualParameters (_actual_parameters_);
        SetCloseParenthesis (_close_parenthesis_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctionCallStatement (
            (TId)CloneNode (_id_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PActualParameters)CloneNode (_actual_parameters_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCallStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_open_parenthesis_)
            + ToString (_actual_parameters_)
            + ToString (_close_parenthesis_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AManyActualParameters : PActualParameters
{
    private PActualParam _actual_param_;
    private TComma _comma_;
    private PActualParameters _actual_parameters_;

    public AManyActualParameters ()
    {
    }

    public AManyActualParameters (
            PActualParam _actual_param_,
            TComma _comma_,
            PActualParameters _actual_parameters_
    )
    {
        SetActualParam (_actual_param_);
        SetComma (_comma_);
        SetActualParameters (_actual_parameters_);
    }

    public override Object Clone()
    {
        return new AManyActualParameters (
            (PActualParam)CloneNode (_actual_param_),
            (TComma)CloneNode (_comma_),
            (PActualParameters)CloneNode (_actual_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAManyActualParameters(this);
    }

    public PActualParam GetActualParam ()
    {
        return _actual_param_;
    }

    public void SetActualParam (PActualParam node)
    {
        if(_actual_param_ != null)
        {
            _actual_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_param_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PActualParameters GetActualParameters ()
    {
        return _actual_parameters_;
    }

    public void SetActualParameters (PActualParameters node)
    {
        if(_actual_parameters_ != null)
        {
            _actual_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_param_)
            + ToString (_comma_)
            + ToString (_actual_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_param_ == child )
        {
            _actual_param_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _actual_parameters_ == child )
        {
            _actual_parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_param_ == oldChild )
        {
            SetActualParam ((PActualParam) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _actual_parameters_ == oldChild )
        {
            SetActualParameters ((PActualParameters) newChild);
            return;
        }
    }

}
public sealed class ASingleActualParameters : PActualParameters
{
    private PActualParam _actual_param_;

    public ASingleActualParameters ()
    {
    }

    public ASingleActualParameters (
            PActualParam _actual_param_
    )
    {
        SetActualParam (_actual_param_);
    }

    public override Object Clone()
    {
        return new ASingleActualParameters (
            (PActualParam)CloneNode (_actual_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleActualParameters(this);
    }

    public PActualParam GetActualParam ()
    {
        return _actual_param_;
    }

    public void SetActualParam (PActualParam node)
    {
        if(_actual_param_ != null)
        {
            _actual_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_param_ == child )
        {
            _actual_param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_param_ == oldChild )
        {
            SetActualParam ((PActualParam) newChild);
            return;
        }
    }

}
public sealed class AActualParamActualParam : PActualParam
{
    private PExpression _expression_;

    public AActualParamActualParam ()
    {
    }

    public AActualParamActualParam (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AActualParamActualParam (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAActualParamActualParam(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ANoActualParamActualParam : PActualParam
{


    public ANoActualParamActualParam (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoActualParamActualParam (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoActualParamActualParam(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AJustifIfStatement : PIfStatement
{
    private TIf _if_;
    private TOpenParenthesis _open_parenthesis_;
    private PExpression _expression_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBracket _open_bracket_;
    private PStatements _statements_;
    private TCloseBracket _close_bracket_;

    public AJustifIfStatement ()
    {
    }

    public AJustifIfStatement (
            TIf _if_,
            TOpenParenthesis _open_parenthesis_,
            PExpression _expression_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBracket _open_bracket_,
            PStatements _statements_,
            TCloseBracket _close_bracket_
    )
    {
        SetIf (_if_);
        SetOpenParenthesis (_open_parenthesis_);
        SetExpression (_expression_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBracket (_open_bracket_);
        SetStatements (_statements_);
        SetCloseBracket (_close_bracket_);
    }

    public override Object Clone()
    {
        return new AJustifIfStatement (
            (TIf)CloneNode (_if_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (PStatements)CloneNode (_statements_),
            (TCloseBracket)CloneNode (_close_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAJustifIfStatement(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_open_parenthesis_)
            + ToString (_expression_)
            + ToString (_close_parenthesis_)
            + ToString (_open_bracket_)
            + ToString (_statements_)
            + ToString (_close_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
    }

}
public sealed class AIfelseIfStatement : PIfStatement
{
    private TIf _if_;
    private TOpenParenthesis _open_parenthesis_;
    private PExpression _expression_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBracket _if_open_bracket_;
    private PStatements _if_statements_;
    private TCloseBracket _if_close_bracket_;
    private TElse _else_;
    private TOpenBracket _else_open_bracket_;
    private PStatements _else_statements_;
    private TCloseBracket _else_close_bracket_;

    public AIfelseIfStatement ()
    {
    }

    public AIfelseIfStatement (
            TIf _if_,
            TOpenParenthesis _open_parenthesis_,
            PExpression _expression_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBracket _if_open_bracket_,
            PStatements _if_statements_,
            TCloseBracket _if_close_bracket_,
            TElse _else_,
            TOpenBracket _else_open_bracket_,
            PStatements _else_statements_,
            TCloseBracket _else_close_bracket_
    )
    {
        SetIf (_if_);
        SetOpenParenthesis (_open_parenthesis_);
        SetExpression (_expression_);
        SetCloseParenthesis (_close_parenthesis_);
        SetIfOpenBracket (_if_open_bracket_);
        SetIfStatements (_if_statements_);
        SetIfCloseBracket (_if_close_bracket_);
        SetElse (_else_);
        SetElseOpenBracket (_else_open_bracket_);
        SetElseStatements (_else_statements_);
        SetElseCloseBracket (_else_close_bracket_);
    }

    public override Object Clone()
    {
        return new AIfelseIfStatement (
            (TIf)CloneNode (_if_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBracket)CloneNode (_if_open_bracket_),
            (PStatements)CloneNode (_if_statements_),
            (TCloseBracket)CloneNode (_if_close_bracket_),
            (TElse)CloneNode (_else_),
            (TOpenBracket)CloneNode (_else_open_bracket_),
            (PStatements)CloneNode (_else_statements_),
            (TCloseBracket)CloneNode (_else_close_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfelseIfStatement(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBracket GetIfOpenBracket ()
    {
        return _if_open_bracket_;
    }

    public void SetIfOpenBracket (TOpenBracket node)
    {
        if(_if_open_bracket_ != null)
        {
            _if_open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_open_bracket_ = node;
    }
    public PStatements GetIfStatements ()
    {
        return _if_statements_;
    }

    public void SetIfStatements (PStatements node)
    {
        if(_if_statements_ != null)
        {
            _if_statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statements_ = node;
    }
    public TCloseBracket GetIfCloseBracket ()
    {
        return _if_close_bracket_;
    }

    public void SetIfCloseBracket (TCloseBracket node)
    {
        if(_if_close_bracket_ != null)
        {
            _if_close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_close_bracket_ = node;
    }
    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TOpenBracket GetElseOpenBracket ()
    {
        return _else_open_bracket_;
    }

    public void SetElseOpenBracket (TOpenBracket node)
    {
        if(_else_open_bracket_ != null)
        {
            _else_open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_open_bracket_ = node;
    }
    public PStatements GetElseStatements ()
    {
        return _else_statements_;
    }

    public void SetElseStatements (PStatements node)
    {
        if(_else_statements_ != null)
        {
            _else_statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_statements_ = node;
    }
    public TCloseBracket GetElseCloseBracket ()
    {
        return _else_close_bracket_;
    }

    public void SetElseCloseBracket (TCloseBracket node)
    {
        if(_else_close_bracket_ != null)
        {
            _else_close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_close_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_open_parenthesis_)
            + ToString (_expression_)
            + ToString (_close_parenthesis_)
            + ToString (_if_open_bracket_)
            + ToString (_if_statements_)
            + ToString (_if_close_bracket_)
            + ToString (_else_)
            + ToString (_else_open_bracket_)
            + ToString (_else_statements_)
            + ToString (_else_close_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _if_open_bracket_ == child )
        {
            _if_open_bracket_ = null;
            return;
        }
        if ( _if_statements_ == child )
        {
            _if_statements_ = null;
            return;
        }
        if ( _if_close_bracket_ == child )
        {
            _if_close_bracket_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _else_open_bracket_ == child )
        {
            _else_open_bracket_ = null;
            return;
        }
        if ( _else_statements_ == child )
        {
            _else_statements_ = null;
            return;
        }
        if ( _else_close_bracket_ == child )
        {
            _else_close_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _if_open_bracket_ == oldChild )
        {
            SetIfOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _if_statements_ == oldChild )
        {
            SetIfStatements ((PStatements) newChild);
            return;
        }
        if ( _if_close_bracket_ == oldChild )
        {
            SetIfCloseBracket ((TCloseBracket) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _else_open_bracket_ == oldChild )
        {
            SetElseOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _else_statements_ == oldChild )
        {
            SetElseStatements ((PStatements) newChild);
            return;
        }
        if ( _else_close_bracket_ == oldChild )
        {
            SetElseCloseBracket ((TCloseBracket) newChild);
            return;
        }
    }

}
public sealed class AWhileWhileStatement : PWhileStatement
{
    private TWhile _while_;
    private TOpenParenthesis _open_parenthesis_;
    private PExpression _expression_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBracket _open_bracket_;
    private PStatements _statements_;
    private TCloseBracket _close_bracket_;

    public AWhileWhileStatement ()
    {
    }

    public AWhileWhileStatement (
            TWhile _while_,
            TOpenParenthesis _open_parenthesis_,
            PExpression _expression_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBracket _open_bracket_,
            PStatements _statements_,
            TCloseBracket _close_bracket_
    )
    {
        SetWhile (_while_);
        SetOpenParenthesis (_open_parenthesis_);
        SetExpression (_expression_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBracket (_open_bracket_);
        SetStatements (_statements_);
        SetCloseBracket (_close_bracket_);
    }

    public override Object Clone()
    {
        return new AWhileWhileStatement (
            (TWhile)CloneNode (_while_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (PStatements)CloneNode (_statements_),
            (TCloseBracket)CloneNode (_close_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileWhileStatement(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_open_parenthesis_)
            + ToString (_expression_)
            + ToString (_close_parenthesis_)
            + ToString (_open_bracket_)
            + ToString (_statements_)
            + ToString (_close_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
    }

}
public sealed class ABitorExpression : PExpression
{
    private PExpression _expression_;
    private TBitOr _bit_or_;
    private PExpression2 _expression2_;

    public ABitorExpression ()
    {
    }

    public ABitorExpression (
            PExpression _expression_,
            TBitOr _bit_or_,
            PExpression2 _expression2_
    )
    {
        SetExpression (_expression_);
        SetBitOr (_bit_or_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new ABitorExpression (
            (PExpression)CloneNode (_expression_),
            (TBitOr)CloneNode (_bit_or_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABitorExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TBitOr GetBitOr ()
    {
        return _bit_or_;
    }

    public void SetBitOr (TBitOr node)
    {
        if(_bit_or_ != null)
        {
            _bit_or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bit_or_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_bit_or_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _bit_or_ == child )
        {
            _bit_or_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _bit_or_ == oldChild )
        {
            SetBitOr ((TBitOr) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class APassExpression : PExpression
{
    private PExpression2 _expression2_;

    public APassExpression ()
    {
    }

    public APassExpression (
            PExpression2 _expression2_
    )
    {
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new APassExpression (
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class ABitandExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TBitAnd _bit_and_;
    private PExpression3 _expression3_;

    public ABitandExpression2 ()
    {
    }

    public ABitandExpression2 (
            PExpression2 _expression2_,
            TBitAnd _bit_and_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetBitAnd (_bit_and_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new ABitandExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TBitAnd)CloneNode (_bit_and_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABitandExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TBitAnd GetBitAnd ()
    {
        return _bit_and_;
    }

    public void SetBitAnd (TBitAnd node)
    {
        if(_bit_and_ != null)
        {
            _bit_and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bit_and_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_bit_and_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _bit_and_ == child )
        {
            _bit_and_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _bit_and_ == oldChild )
        {
            SetBitAnd ((TBitAnd) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class APassExpression2 : PExpression2
{
    private PExpression3 _expression3_;

    public APassExpression2 ()
    {
    }

    public APassExpression2 (
            PExpression3 _expression3_
    )
    {
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new APassExpression2 (
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression2(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class AEquivalentExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TEquivalence _equivalence_;
    private PExpression4 _expression4_;

    public AEquivalentExpression3 ()
    {
    }

    public AEquivalentExpression3 (
            PExpression3 _expression3_,
            TEquivalence _equivalence_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetEquivalence (_equivalence_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new AEquivalentExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TEquivalence)CloneNode (_equivalence_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEquivalentExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TEquivalence GetEquivalence ()
    {
        return _equivalence_;
    }

    public void SetEquivalence (TEquivalence node)
    {
        if(_equivalence_ != null)
        {
            _equivalence_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equivalence_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_equivalence_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _equivalence_ == child )
        {
            _equivalence_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _equivalence_ == oldChild )
        {
            SetEquivalence ((TEquivalence) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class ANotequivalentExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TNotEquivalent _not_equivalent_;
    private PExpression4 _expression4_;

    public ANotequivalentExpression3 ()
    {
    }

    public ANotequivalentExpression3 (
            PExpression3 _expression3_,
            TNotEquivalent _not_equivalent_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetNotEquivalent (_not_equivalent_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new ANotequivalentExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TNotEquivalent)CloneNode (_not_equivalent_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotequivalentExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TNotEquivalent GetNotEquivalent ()
    {
        return _not_equivalent_;
    }

    public void SetNotEquivalent (TNotEquivalent node)
    {
        if(_not_equivalent_ != null)
        {
            _not_equivalent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_equivalent_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_not_equivalent_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _not_equivalent_ == child )
        {
            _not_equivalent_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _not_equivalent_ == oldChild )
        {
            SetNotEquivalent ((TNotEquivalent) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class APassExpression3 : PExpression3
{
    private PExpression4 _expression4_;

    public APassExpression3 ()
    {
    }

    public APassExpression3 (
            PExpression4 _expression4_
    )
    {
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new APassExpression3 (
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression3(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class AGreateqExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TGreatEqThan _great_eq_than_;
    private PExpressionMath1 _expression_math1_;

    public AGreateqExpression4 ()
    {
    }

    public AGreateqExpression4 (
            PExpression4 _expression4_,
            TGreatEqThan _great_eq_than_,
            PExpressionMath1 _expression_math1_
    )
    {
        SetExpression4 (_expression4_);
        SetGreatEqThan (_great_eq_than_);
        SetExpressionMath1 (_expression_math1_);
    }

    public override Object Clone()
    {
        return new AGreateqExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TGreatEqThan)CloneNode (_great_eq_than_),
            (PExpressionMath1)CloneNode (_expression_math1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreateqExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TGreatEqThan GetGreatEqThan ()
    {
        return _great_eq_than_;
    }

    public void SetGreatEqThan (TGreatEqThan node)
    {
        if(_great_eq_than_ != null)
        {
            _great_eq_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _great_eq_than_ = node;
    }
    public PExpressionMath1 GetExpressionMath1 ()
    {
        return _expression_math1_;
    }

    public void SetExpressionMath1 (PExpressionMath1 node)
    {
        if(_expression_math1_ != null)
        {
            _expression_math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_great_eq_than_)
            + ToString (_expression_math1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _great_eq_than_ == child )
        {
            _great_eq_than_ = null;
            return;
        }
        if ( _expression_math1_ == child )
        {
            _expression_math1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _great_eq_than_ == oldChild )
        {
            SetGreatEqThan ((TGreatEqThan) newChild);
            return;
        }
        if ( _expression_math1_ == oldChild )
        {
            SetExpressionMath1 ((PExpressionMath1) newChild);
            return;
        }
    }

}
public sealed class ALesseqExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TLessEqThan _less_eq_than_;
    private PExpressionMath1 _expression_math1_;

    public ALesseqExpression4 ()
    {
    }

    public ALesseqExpression4 (
            PExpression4 _expression4_,
            TLessEqThan _less_eq_than_,
            PExpressionMath1 _expression_math1_
    )
    {
        SetExpression4 (_expression4_);
        SetLessEqThan (_less_eq_than_);
        SetExpressionMath1 (_expression_math1_);
    }

    public override Object Clone()
    {
        return new ALesseqExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TLessEqThan)CloneNode (_less_eq_than_),
            (PExpressionMath1)CloneNode (_expression_math1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALesseqExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TLessEqThan GetLessEqThan ()
    {
        return _less_eq_than_;
    }

    public void SetLessEqThan (TLessEqThan node)
    {
        if(_less_eq_than_ != null)
        {
            _less_eq_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_eq_than_ = node;
    }
    public PExpressionMath1 GetExpressionMath1 ()
    {
        return _expression_math1_;
    }

    public void SetExpressionMath1 (PExpressionMath1 node)
    {
        if(_expression_math1_ != null)
        {
            _expression_math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_less_eq_than_)
            + ToString (_expression_math1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _less_eq_than_ == child )
        {
            _less_eq_than_ = null;
            return;
        }
        if ( _expression_math1_ == child )
        {
            _expression_math1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _less_eq_than_ == oldChild )
        {
            SetLessEqThan ((TLessEqThan) newChild);
            return;
        }
        if ( _expression_math1_ == oldChild )
        {
            SetExpressionMath1 ((PExpressionMath1) newChild);
            return;
        }
    }

}
public sealed class AGreatthanExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TGreaterThan _greater_than_;
    private PExpressionMath1 _expression_math1_;

    public AGreatthanExpression4 ()
    {
    }

    public AGreatthanExpression4 (
            PExpression4 _expression4_,
            TGreaterThan _greater_than_,
            PExpressionMath1 _expression_math1_
    )
    {
        SetExpression4 (_expression4_);
        SetGreaterThan (_greater_than_);
        SetExpressionMath1 (_expression_math1_);
    }

    public override Object Clone()
    {
        return new AGreatthanExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TGreaterThan)CloneNode (_greater_than_),
            (PExpressionMath1)CloneNode (_expression_math1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreatthanExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TGreaterThan GetGreaterThan ()
    {
        return _greater_than_;
    }

    public void SetGreaterThan (TGreaterThan node)
    {
        if(_greater_than_ != null)
        {
            _greater_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_than_ = node;
    }
    public PExpressionMath1 GetExpressionMath1 ()
    {
        return _expression_math1_;
    }

    public void SetExpressionMath1 (PExpressionMath1 node)
    {
        if(_expression_math1_ != null)
        {
            _expression_math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_greater_than_)
            + ToString (_expression_math1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _greater_than_ == child )
        {
            _greater_than_ = null;
            return;
        }
        if ( _expression_math1_ == child )
        {
            _expression_math1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _greater_than_ == oldChild )
        {
            SetGreaterThan ((TGreaterThan) newChild);
            return;
        }
        if ( _expression_math1_ == oldChild )
        {
            SetExpressionMath1 ((PExpressionMath1) newChild);
            return;
        }
    }

}
public sealed class ALessthanExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TLessThan _less_than_;
    private PExpressionMath1 _expression_math1_;

    public ALessthanExpression4 ()
    {
    }

    public ALessthanExpression4 (
            PExpression4 _expression4_,
            TLessThan _less_than_,
            PExpressionMath1 _expression_math1_
    )
    {
        SetExpression4 (_expression4_);
        SetLessThan (_less_than_);
        SetExpressionMath1 (_expression_math1_);
    }

    public override Object Clone()
    {
        return new ALessthanExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TLessThan)CloneNode (_less_than_),
            (PExpressionMath1)CloneNode (_expression_math1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessthanExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TLessThan GetLessThan ()
    {
        return _less_than_;
    }

    public void SetLessThan (TLessThan node)
    {
        if(_less_than_ != null)
        {
            _less_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_than_ = node;
    }
    public PExpressionMath1 GetExpressionMath1 ()
    {
        return _expression_math1_;
    }

    public void SetExpressionMath1 (PExpressionMath1 node)
    {
        if(_expression_math1_ != null)
        {
            _expression_math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_less_than_)
            + ToString (_expression_math1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _less_than_ == child )
        {
            _less_than_ = null;
            return;
        }
        if ( _expression_math1_ == child )
        {
            _expression_math1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _less_than_ == oldChild )
        {
            SetLessThan ((TLessThan) newChild);
            return;
        }
        if ( _expression_math1_ == oldChild )
        {
            SetExpressionMath1 ((PExpressionMath1) newChild);
            return;
        }
    }

}
public sealed class APassExpression4 : PExpression4
{
    private PExpressionMath1 _expression_math1_;

    public APassExpression4 ()
    {
    }

    public APassExpression4 (
            PExpressionMath1 _expression_math1_
    )
    {
        SetExpressionMath1 (_expression_math1_);
    }

    public override Object Clone()
    {
        return new APassExpression4 (
            (PExpressionMath1)CloneNode (_expression_math1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression4(this);
    }

    public PExpressionMath1 GetExpressionMath1 ()
    {
        return _expression_math1_;
    }

    public void SetExpressionMath1 (PExpressionMath1 node)
    {
        if(_expression_math1_ != null)
        {
            _expression_math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_math1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_math1_ == child )
        {
            _expression_math1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_math1_ == oldChild )
        {
            SetExpressionMath1 ((PExpressionMath1) newChild);
            return;
        }
    }

}
public sealed class AAddExpressionMath1 : PExpressionMath1
{
    private PExpressionMath1 _expression_math1_;
    private TPlus _plus_;
    private PExpressionMath2 _expression_math2_;

    public AAddExpressionMath1 ()
    {
    }

    public AAddExpressionMath1 (
            PExpressionMath1 _expression_math1_,
            TPlus _plus_,
            PExpressionMath2 _expression_math2_
    )
    {
        SetExpressionMath1 (_expression_math1_);
        SetPlus (_plus_);
        SetExpressionMath2 (_expression_math2_);
    }

    public override Object Clone()
    {
        return new AAddExpressionMath1 (
            (PExpressionMath1)CloneNode (_expression_math1_),
            (TPlus)CloneNode (_plus_),
            (PExpressionMath2)CloneNode (_expression_math2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExpressionMath1(this);
    }

    public PExpressionMath1 GetExpressionMath1 ()
    {
        return _expression_math1_;
    }

    public void SetExpressionMath1 (PExpressionMath1 node)
    {
        if(_expression_math1_ != null)
        {
            _expression_math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math1_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpressionMath2 GetExpressionMath2 ()
    {
        return _expression_math2_;
    }

    public void SetExpressionMath2 (PExpressionMath2 node)
    {
        if(_expression_math2_ != null)
        {
            _expression_math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_math1_)
            + ToString (_plus_)
            + ToString (_expression_math2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_math1_ == child )
        {
            _expression_math1_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expression_math2_ == child )
        {
            _expression_math2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_math1_ == oldChild )
        {
            SetExpressionMath1 ((PExpressionMath1) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expression_math2_ == oldChild )
        {
            SetExpressionMath2 ((PExpressionMath2) newChild);
            return;
        }
    }

}
public sealed class ASubtractExpressionMath1 : PExpressionMath1
{
    private PExpressionMath1 _expression_math1_;
    private TMinus _minus_;
    private PExpressionMath2 _expression_math2_;

    public ASubtractExpressionMath1 ()
    {
    }

    public ASubtractExpressionMath1 (
            PExpressionMath1 _expression_math1_,
            TMinus _minus_,
            PExpressionMath2 _expression_math2_
    )
    {
        SetExpressionMath1 (_expression_math1_);
        SetMinus (_minus_);
        SetExpressionMath2 (_expression_math2_);
    }

    public override Object Clone()
    {
        return new ASubtractExpressionMath1 (
            (PExpressionMath1)CloneNode (_expression_math1_),
            (TMinus)CloneNode (_minus_),
            (PExpressionMath2)CloneNode (_expression_math2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubtractExpressionMath1(this);
    }

    public PExpressionMath1 GetExpressionMath1 ()
    {
        return _expression_math1_;
    }

    public void SetExpressionMath1 (PExpressionMath1 node)
    {
        if(_expression_math1_ != null)
        {
            _expression_math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math1_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpressionMath2 GetExpressionMath2 ()
    {
        return _expression_math2_;
    }

    public void SetExpressionMath2 (PExpressionMath2 node)
    {
        if(_expression_math2_ != null)
        {
            _expression_math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_math1_)
            + ToString (_minus_)
            + ToString (_expression_math2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_math1_ == child )
        {
            _expression_math1_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _expression_math2_ == child )
        {
            _expression_math2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_math1_ == oldChild )
        {
            SetExpressionMath1 ((PExpressionMath1) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _expression_math2_ == oldChild )
        {
            SetExpressionMath2 ((PExpressionMath2) newChild);
            return;
        }
    }

}
public sealed class APassExpressionMath1 : PExpressionMath1
{
    private PExpressionMath2 _expression_math2_;

    public APassExpressionMath1 ()
    {
    }

    public APassExpressionMath1 (
            PExpressionMath2 _expression_math2_
    )
    {
        SetExpressionMath2 (_expression_math2_);
    }

    public override Object Clone()
    {
        return new APassExpressionMath1 (
            (PExpressionMath2)CloneNode (_expression_math2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpressionMath1(this);
    }

    public PExpressionMath2 GetExpressionMath2 ()
    {
        return _expression_math2_;
    }

    public void SetExpressionMath2 (PExpressionMath2 node)
    {
        if(_expression_math2_ != null)
        {
            _expression_math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_math2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_math2_ == child )
        {
            _expression_math2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_math2_ == oldChild )
        {
            SetExpressionMath2 ((PExpressionMath2) newChild);
            return;
        }
    }

}
public sealed class AMultiplyExpressionMath2 : PExpressionMath2
{
    private PExpressionMath2 _expression_math2_;
    private TMult _mult_;
    private PExpressionMath3 _expression_math3_;

    public AMultiplyExpressionMath2 ()
    {
    }

    public AMultiplyExpressionMath2 (
            PExpressionMath2 _expression_math2_,
            TMult _mult_,
            PExpressionMath3 _expression_math3_
    )
    {
        SetExpressionMath2 (_expression_math2_);
        SetMult (_mult_);
        SetExpressionMath3 (_expression_math3_);
    }

    public override Object Clone()
    {
        return new AMultiplyExpressionMath2 (
            (PExpressionMath2)CloneNode (_expression_math2_),
            (TMult)CloneNode (_mult_),
            (PExpressionMath3)CloneNode (_expression_math3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyExpressionMath2(this);
    }

    public PExpressionMath2 GetExpressionMath2 ()
    {
        return _expression_math2_;
    }

    public void SetExpressionMath2 (PExpressionMath2 node)
    {
        if(_expression_math2_ != null)
        {
            _expression_math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math2_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PExpressionMath3 GetExpressionMath3 ()
    {
        return _expression_math3_;
    }

    public void SetExpressionMath3 (PExpressionMath3 node)
    {
        if(_expression_math3_ != null)
        {
            _expression_math3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_math2_)
            + ToString (_mult_)
            + ToString (_expression_math3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_math2_ == child )
        {
            _expression_math2_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _expression_math3_ == child )
        {
            _expression_math3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_math2_ == oldChild )
        {
            SetExpressionMath2 ((PExpressionMath2) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _expression_math3_ == oldChild )
        {
            SetExpressionMath3 ((PExpressionMath3) newChild);
            return;
        }
    }

}
public sealed class ADivideExpressionMath2 : PExpressionMath2
{
    private PExpressionMath2 _expression_math2_;
    private TDivide _divide_;
    private PExpressionMath3 _expression_math3_;

    public ADivideExpressionMath2 ()
    {
    }

    public ADivideExpressionMath2 (
            PExpressionMath2 _expression_math2_,
            TDivide _divide_,
            PExpressionMath3 _expression_math3_
    )
    {
        SetExpressionMath2 (_expression_math2_);
        SetDivide (_divide_);
        SetExpressionMath3 (_expression_math3_);
    }

    public override Object Clone()
    {
        return new ADivideExpressionMath2 (
            (PExpressionMath2)CloneNode (_expression_math2_),
            (TDivide)CloneNode (_divide_),
            (PExpressionMath3)CloneNode (_expression_math3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideExpressionMath2(this);
    }

    public PExpressionMath2 GetExpressionMath2 ()
    {
        return _expression_math2_;
    }

    public void SetExpressionMath2 (PExpressionMath2 node)
    {
        if(_expression_math2_ != null)
        {
            _expression_math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math2_ = node;
    }
    public TDivide GetDivide ()
    {
        return _divide_;
    }

    public void SetDivide (TDivide node)
    {
        if(_divide_ != null)
        {
            _divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _divide_ = node;
    }
    public PExpressionMath3 GetExpressionMath3 ()
    {
        return _expression_math3_;
    }

    public void SetExpressionMath3 (PExpressionMath3 node)
    {
        if(_expression_math3_ != null)
        {
            _expression_math3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_math2_)
            + ToString (_divide_)
            + ToString (_expression_math3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_math2_ == child )
        {
            _expression_math2_ = null;
            return;
        }
        if ( _divide_ == child )
        {
            _divide_ = null;
            return;
        }
        if ( _expression_math3_ == child )
        {
            _expression_math3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_math2_ == oldChild )
        {
            SetExpressionMath2 ((PExpressionMath2) newChild);
            return;
        }
        if ( _divide_ == oldChild )
        {
            SetDivide ((TDivide) newChild);
            return;
        }
        if ( _expression_math3_ == oldChild )
        {
            SetExpressionMath3 ((PExpressionMath3) newChild);
            return;
        }
    }

}
public sealed class APassExpressionMath2 : PExpressionMath2
{
    private PExpressionMath3 _expression_math3_;

    public APassExpressionMath2 ()
    {
    }

    public APassExpressionMath2 (
            PExpressionMath3 _expression_math3_
    )
    {
        SetExpressionMath3 (_expression_math3_);
    }

    public override Object Clone()
    {
        return new APassExpressionMath2 (
            (PExpressionMath3)CloneNode (_expression_math3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpressionMath2(this);
    }

    public PExpressionMath3 GetExpressionMath3 ()
    {
        return _expression_math3_;
    }

    public void SetExpressionMath3 (PExpressionMath3 node)
    {
        if(_expression_math3_ != null)
        {
            _expression_math3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_math3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_math3_ == child )
        {
            _expression_math3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_math3_ == oldChild )
        {
            SetExpressionMath3 ((PExpressionMath3) newChild);
            return;
        }
    }

}
public sealed class ANegativeExpressionMath3 : PExpressionMath3
{
    private TMinus _minus_;
    private PExpressionMath4 _expression_math4_;

    public ANegativeExpressionMath3 ()
    {
    }

    public ANegativeExpressionMath3 (
            TMinus _minus_,
            PExpressionMath4 _expression_math4_
    )
    {
        SetMinus (_minus_);
        SetExpressionMath4 (_expression_math4_);
    }

    public override Object Clone()
    {
        return new ANegativeExpressionMath3 (
            (TMinus)CloneNode (_minus_),
            (PExpressionMath4)CloneNode (_expression_math4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegativeExpressionMath3(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpressionMath4 GetExpressionMath4 ()
    {
        return _expression_math4_;
    }

    public void SetExpressionMath4 (PExpressionMath4 node)
    {
        if(_expression_math4_ != null)
        {
            _expression_math4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_expression_math4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _expression_math4_ == child )
        {
            _expression_math4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _expression_math4_ == oldChild )
        {
            SetExpressionMath4 ((PExpressionMath4) newChild);
            return;
        }
    }

}
public sealed class ABitnotExpressionMath3 : PExpressionMath3
{
    private TBitNot _bit_not_;
    private PExpressionMath4 _expression_math4_;

    public ABitnotExpressionMath3 ()
    {
    }

    public ABitnotExpressionMath3 (
            TBitNot _bit_not_,
            PExpressionMath4 _expression_math4_
    )
    {
        SetBitNot (_bit_not_);
        SetExpressionMath4 (_expression_math4_);
    }

    public override Object Clone()
    {
        return new ABitnotExpressionMath3 (
            (TBitNot)CloneNode (_bit_not_),
            (PExpressionMath4)CloneNode (_expression_math4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABitnotExpressionMath3(this);
    }

    public TBitNot GetBitNot ()
    {
        return _bit_not_;
    }

    public void SetBitNot (TBitNot node)
    {
        if(_bit_not_ != null)
        {
            _bit_not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bit_not_ = node;
    }
    public PExpressionMath4 GetExpressionMath4 ()
    {
        return _expression_math4_;
    }

    public void SetExpressionMath4 (PExpressionMath4 node)
    {
        if(_expression_math4_ != null)
        {
            _expression_math4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bit_not_)
            + ToString (_expression_math4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bit_not_ == child )
        {
            _bit_not_ = null;
            return;
        }
        if ( _expression_math4_ == child )
        {
            _expression_math4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bit_not_ == oldChild )
        {
            SetBitNot ((TBitNot) newChild);
            return;
        }
        if ( _expression_math4_ == oldChild )
        {
            SetExpressionMath4 ((PExpressionMath4) newChild);
            return;
        }
    }

}
public sealed class APassExpressionMath3 : PExpressionMath3
{
    private PExpressionMath4 _expression_math4_;

    public APassExpressionMath3 ()
    {
    }

    public APassExpressionMath3 (
            PExpressionMath4 _expression_math4_
    )
    {
        SetExpressionMath4 (_expression_math4_);
    }

    public override Object Clone()
    {
        return new APassExpressionMath3 (
            (PExpressionMath4)CloneNode (_expression_math4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpressionMath3(this);
    }

    public PExpressionMath4 GetExpressionMath4 ()
    {
        return _expression_math4_;
    }

    public void SetExpressionMath4 (PExpressionMath4 node)
    {
        if(_expression_math4_ != null)
        {
            _expression_math4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_math4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_math4_ == child )
        {
            _expression_math4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_math4_ == oldChild )
        {
            SetExpressionMath4 ((PExpressionMath4) newChild);
            return;
        }
    }

}
public sealed class AParenthesisExpressionMath4 : PExpressionMath4
{
    private TOpenParenthesis _open_parenthesis_;
    private PExpressionMath1 _expression_math1_;
    private TCloseParenthesis _close_parenthesis_;

    public AParenthesisExpressionMath4 ()
    {
    }

    public AParenthesisExpressionMath4 (
            TOpenParenthesis _open_parenthesis_,
            PExpressionMath1 _expression_math1_,
            TCloseParenthesis _close_parenthesis_
    )
    {
        SetOpenParenthesis (_open_parenthesis_);
        SetExpressionMath1 (_expression_math1_);
        SetCloseParenthesis (_close_parenthesis_);
    }

    public override Object Clone()
    {
        return new AParenthesisExpressionMath4 (
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PExpressionMath1)CloneNode (_expression_math1_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthesisExpressionMath4(this);
    }

    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PExpressionMath1 GetExpressionMath1 ()
    {
        return _expression_math1_;
    }

    public void SetExpressionMath1 (PExpressionMath1 node)
    {
        if(_expression_math1_ != null)
        {
            _expression_math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_math1_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_open_parenthesis_)
            + ToString (_expression_math1_)
            + ToString (_close_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _expression_math1_ == child )
        {
            _expression_math1_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _expression_math1_ == oldChild )
        {
            SetExpressionMath1 ((PExpressionMath1) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
    }

}
public sealed class APassExpressionMath4 : PExpressionMath4
{
    private POperand _operand_;

    public APassExpressionMath4 ()
    {
    }

    public APassExpressionMath4 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassExpressionMath4 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpressionMath4(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloOperand : POperand
{
    private TFloat _float_;

    public AFloOperand ()
    {
    }

    public AFloOperand (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloOperand (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloOperand(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AStrOperand : POperand
{
    private TString _string_;

    public AStrOperand ()
    {
    }

    public AStrOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStrOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStrOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
