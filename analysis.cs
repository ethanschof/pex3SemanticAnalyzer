/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAMainState(AMainState node);
    void CaseAMultipleConstantsConstants(AMultipleConstantsConstants node);
    void CaseANoConstantsConstants(ANoConstantsConstants node);
    void CaseAConstantDeclareConstant(AConstantDeclareConstant node);
    void CaseAMultipleFunctionsFunctions(AMultipleFunctionsFunctions node);
    void CaseANoFunctionsFunctions(ANoFunctionsFunctions node);
    void CaseAFunction(AFunction node);
    void CaseAManyParams(AManyParams node);
    void CaseAOneParams(AOneParams node);
    void CaseAOneParamParam(AOneParamParam node);
    void CaseANoParamParam(ANoParamParam node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseANoStatementsStatements(ANoStatementsStatements node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseAFuncCallStatement(AFuncCallStatement node);
    void CaseAIfstateStatement(AIfstateStatement node);
    void CaseAWhileLoopStatement(AWhileLoopStatement node);
    void CaseADeclareStatement(ADeclareStatement node);
    void CaseAAssignStatement(AAssignStatement node);
    void CaseAFunctionCallStatement(AFunctionCallStatement node);
    void CaseAManyActualParameters(AManyActualParameters node);
    void CaseASingleActualParameters(ASingleActualParameters node);
    void CaseAActualParamActualParam(AActualParamActualParam node);
    void CaseANoActualParamActualParam(ANoActualParamActualParam node);
    void CaseAJustifIfStatement(AJustifIfStatement node);
    void CaseAIfelseIfStatement(AIfelseIfStatement node);
    void CaseAWhileWhileStatement(AWhileWhileStatement node);
    void CaseABitorExpression(ABitorExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseABitandExpression2(ABitandExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseAEquivalentExpression3(AEquivalentExpression3 node);
    void CaseANotequivalentExpression3(ANotequivalentExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseAGreateqExpression4(AGreateqExpression4 node);
    void CaseALesseqExpression4(ALesseqExpression4 node);
    void CaseAGreatthanExpression4(AGreatthanExpression4 node);
    void CaseALessthanExpression4(ALessthanExpression4 node);
    void CaseAPassExpression4(APassExpression4 node);
    void CaseAAddExpressionMath1(AAddExpressionMath1 node);
    void CaseASubtractExpressionMath1(ASubtractExpressionMath1 node);
    void CaseAPassExpressionMath1(APassExpressionMath1 node);
    void CaseAMultiplyExpressionMath2(AMultiplyExpressionMath2 node);
    void CaseADivideExpressionMath2(ADivideExpressionMath2 node);
    void CaseAPassExpressionMath2(APassExpressionMath2 node);
    void CaseANegativeExpressionMath3(ANegativeExpressionMath3 node);
    void CaseABitnotExpressionMath3(ABitnotExpressionMath3 node);
    void CaseAPassExpressionMath3(APassExpressionMath3 node);
    void CaseAParenthesisExpressionMath4(AParenthesisExpressionMath4 node);
    void CaseAPassExpressionMath4(APassExpressionMath4 node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAFloOperand(AFloOperand node);
    void CaseAStrOperand(AStrOperand node);
    void CaseAVariableOperand(AVariableOperand node);

    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTMult(TMult node);
    void CaseTDivide(TDivide node);
    void CaseTEol(TEol node);
    void CaseTBitAnd(TBitAnd node);
    void CaseTBitOr(TBitOr node);
    void CaseTBitNot(TBitNot node);
    void CaseTEquivalence(TEquivalence node);
    void CaseTNotEquivalent(TNotEquivalent node);
    void CaseTGreaterThan(TGreaterThan node);
    void CaseTLessThan(TLessThan node);
    void CaseTGreatEqThan(TGreatEqThan node);
    void CaseTLessEqThan(TLessEqThan node);
    void CaseTOpenParenthesis(TOpenParenthesis node);
    void CaseTCloseParenthesis(TCloseParenthesis node);
    void CaseTOpenBracket(TOpenBracket node);
    void CaseTCloseBracket(TCloseBracket node);
    void CaseTComma(TComma node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTWhile(TWhile node);
    void CaseTDefine(TDefine node);
    void CaseTFunc(TFunc node);
    void CaseTMainDef(TMainDef node);
    void CaseTId(TId node);
    void CaseTInteger(TInteger node);
    void CaseTFloat(TFloat node);
    void CaseTString(TString node);
    void CaseTComment(TComment node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainState(AMainState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleConstantsConstants(AMultipleConstantsConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoConstantsConstants(ANoConstantsConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantDeclareConstant(AConstantDeclareConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleFunctionsFunctions(AMultipleFunctionsFunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoFunctionsFunctions(ANoFunctionsFunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunction(AFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAManyParams(AManyParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneParams(AOneParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneParamParam(AOneParamParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoParamParam(ANoParamParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoStatementsStatements(ANoStatementsStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFuncCallStatement(AFuncCallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfstateStatement(AIfstateStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileLoopStatement(AWhileLoopStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareStatement(ADeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStatement(AAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAManyActualParameters(AManyActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleActualParameters(ASingleActualParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAActualParamActualParam(AActualParamActualParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoActualParamActualParam(ANoActualParamActualParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAJustifIfStatement(AJustifIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfelseIfStatement(AIfelseIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileWhileStatement(AWhileWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABitorExpression(ABitorExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABitandExpression2(ABitandExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEquivalentExpression3(AEquivalentExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotequivalentExpression3(ANotequivalentExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreateqExpression4(AGreateqExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALesseqExpression4(ALesseqExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreatthanExpression4(AGreatthanExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessthanExpression4(ALessthanExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression4(APassExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpressionMath1(AAddExpressionMath1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractExpressionMath1(ASubtractExpressionMath1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpressionMath1(APassExpressionMath1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyExpressionMath2(AMultiplyExpressionMath2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideExpressionMath2(ADivideExpressionMath2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpressionMath2(APassExpressionMath2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegativeExpressionMath3(ANegativeExpressionMath3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABitnotExpressionMath3(ABitnotExpressionMath3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpressionMath3(APassExpressionMath3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthesisExpressionMath4(AParenthesisExpressionMath4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpressionMath4(APassExpressionMath4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloOperand(AFloOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStrOperand(AStrOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBitAnd(TBitAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBitOr(TBitOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBitNot(TBitNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquivalence(TEquivalence node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotEquivalent(TNotEquivalent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThan(TGreaterThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThan(TLessThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreatEqThan(TGreatEqThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessEqThan(TLessEqThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenParenthesis(TOpenParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseParenthesis(TCloseParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenBracket(TOpenBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseBracket(TCloseBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDefine(TDefine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFunc(TFunc node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMainDef(TMainDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetMainState() != null)
        {
            node.GetMainState().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMainState(AMainState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainState(AMainState node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainState(AMainState node)
    {
        InAMainState(node);
        if(node.GetMainDef() != null)
        {
            node.GetMainDef().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        OutAMainState(node);
    }
    public virtual void InAMultipleConstantsConstants(AMultipleConstantsConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConstantsConstants(AMultipleConstantsConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConstantsConstants(AMultipleConstantsConstants node)
    {
        InAMultipleConstantsConstants(node);
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAMultipleConstantsConstants(node);
    }
    public virtual void InANoConstantsConstants(ANoConstantsConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoConstantsConstants(ANoConstantsConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoConstantsConstants(ANoConstantsConstants node)
    {
        InANoConstantsConstants(node);
        OutANoConstantsConstants(node);
    }
    public virtual void InAConstantDeclareConstant(AConstantDeclareConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclareConstant(AConstantDeclareConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclareConstant(AConstantDeclareConstant node)
    {
        InAConstantDeclareConstant(node);
        if(node.GetDefine() != null)
        {
            node.GetDefine().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAConstantDeclareConstant(node);
    }
    public virtual void InAMultipleFunctionsFunctions(AMultipleFunctionsFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFunctionsFunctions(AMultipleFunctionsFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFunctionsFunctions(AMultipleFunctionsFunctions node)
    {
        InAMultipleFunctionsFunctions(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        OutAMultipleFunctionsFunctions(node);
    }
    public virtual void InANoFunctionsFunctions(ANoFunctionsFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoFunctionsFunctions(ANoFunctionsFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseANoFunctionsFunctions(ANoFunctionsFunctions node)
    {
        InANoFunctionsFunctions(node);
        OutANoFunctionsFunctions(node);
    }
    public virtual void InAFunction(AFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunction(AFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunction(AFunction node)
    {
        InAFunction(node);
        if(node.GetFunc() != null)
        {
            node.GetFunc().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        OutAFunction(node);
    }
    public virtual void InAManyParams(AManyParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyParams(AManyParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyParams(AManyParams node)
    {
        InAManyParams(node);
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        OutAManyParams(node);
    }
    public virtual void InAOneParams(AOneParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneParams(AOneParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneParams(AOneParams node)
    {
        InAOneParams(node);
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        OutAOneParams(node);
    }
    public virtual void InAOneParamParam(AOneParamParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneParamParam(AOneParamParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneParamParam(AOneParamParam node)
    {
        InAOneParamParam(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutAOneParamParam(node);
    }
    public virtual void InANoParamParam(ANoParamParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParamParam(ANoParamParam node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParamParam(ANoParamParam node)
    {
        InANoParamParam(node);
        OutANoParamParam(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InANoStatementsStatements(ANoStatementsStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoStatementsStatements(ANoStatementsStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseANoStatementsStatements(ANoStatementsStatements node)
    {
        InANoStatementsStatements(node);
        OutANoStatementsStatements(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAFuncCallStatement(AFuncCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncCallStatement(AFuncCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncCallStatement(AFuncCallStatement node)
    {
        InAFuncCallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutAFuncCallStatement(node);
    }
    public virtual void InAIfstateStatement(AIfstateStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfstateStatement(AIfstateStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfstateStatement(AIfstateStatement node)
    {
        InAIfstateStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfstateStatement(node);
    }
    public virtual void InAWhileLoopStatement(AWhileLoopStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLoopStatement(AWhileLoopStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLoopStatement(AWhileLoopStatement node)
    {
        InAWhileLoopStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileLoopStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InAManyActualParameters(AManyActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyActualParameters(AManyActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyActualParameters(AManyActualParameters node)
    {
        InAManyActualParameters(node);
        if(node.GetActualParam() != null)
        {
            node.GetActualParam().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        OutAManyActualParameters(node);
    }
    public virtual void InASingleActualParameters(ASingleActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleActualParameters(ASingleActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleActualParameters(ASingleActualParameters node)
    {
        InASingleActualParameters(node);
        if(node.GetActualParam() != null)
        {
            node.GetActualParam().Apply(this);
        }
        OutASingleActualParameters(node);
    }
    public virtual void InAActualParamActualParam(AActualParamActualParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAActualParamActualParam(AActualParamActualParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAActualParamActualParam(AActualParamActualParam node)
    {
        InAActualParamActualParam(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAActualParamActualParam(node);
    }
    public virtual void InANoActualParamActualParam(ANoActualParamActualParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoActualParamActualParam(ANoActualParamActualParam node)
    {
        DefaultOut(node);
    }

    public override void CaseANoActualParamActualParam(ANoActualParamActualParam node)
    {
        InANoActualParamActualParam(node);
        OutANoActualParamActualParam(node);
    }
    public virtual void InAJustifIfStatement(AJustifIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAJustifIfStatement(AJustifIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAJustifIfStatement(AJustifIfStatement node)
    {
        InAJustifIfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        OutAJustifIfStatement(node);
    }
    public virtual void InAIfelseIfStatement(AIfelseIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfelseIfStatement(AIfelseIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfelseIfStatement(AIfelseIfStatement node)
    {
        InAIfelseIfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetIfOpenBracket() != null)
        {
            node.GetIfOpenBracket().Apply(this);
        }
        if(node.GetIfStatements() != null)
        {
            node.GetIfStatements().Apply(this);
        }
        if(node.GetIfCloseBracket() != null)
        {
            node.GetIfCloseBracket().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetElseOpenBracket() != null)
        {
            node.GetElseOpenBracket().Apply(this);
        }
        if(node.GetElseStatements() != null)
        {
            node.GetElseStatements().Apply(this);
        }
        if(node.GetElseCloseBracket() != null)
        {
            node.GetElseCloseBracket().Apply(this);
        }
        OutAIfelseIfStatement(node);
    }
    public virtual void InAWhileWhileStatement(AWhileWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileWhileStatement(AWhileWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileWhileStatement(AWhileWhileStatement node)
    {
        InAWhileWhileStatement(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        OutAWhileWhileStatement(node);
    }
    public virtual void InABitorExpression(ABitorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABitorExpression(ABitorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABitorExpression(ABitorExpression node)
    {
        InABitorExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetBitOr() != null)
        {
            node.GetBitOr().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutABitorExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InABitandExpression2(ABitandExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABitandExpression2(ABitandExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseABitandExpression2(ABitandExpression2 node)
    {
        InABitandExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetBitAnd() != null)
        {
            node.GetBitAnd().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutABitandExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAEquivalentExpression3(AEquivalentExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEquivalentExpression3(AEquivalentExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEquivalentExpression3(AEquivalentExpression3 node)
    {
        InAEquivalentExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetEquivalence() != null)
        {
            node.GetEquivalence().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAEquivalentExpression3(node);
    }
    public virtual void InANotequivalentExpression3(ANotequivalentExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotequivalentExpression3(ANotequivalentExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotequivalentExpression3(ANotequivalentExpression3 node)
    {
        InANotequivalentExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetNotEquivalent() != null)
        {
            node.GetNotEquivalent().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutANotequivalentExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InAGreateqExpression4(AGreateqExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreateqExpression4(AGreateqExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreateqExpression4(AGreateqExpression4 node)
    {
        InAGreateqExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetGreatEqThan() != null)
        {
            node.GetGreatEqThan().Apply(this);
        }
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        OutAGreateqExpression4(node);
    }
    public virtual void InALesseqExpression4(ALesseqExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesseqExpression4(ALesseqExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALesseqExpression4(ALesseqExpression4 node)
    {
        InALesseqExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetLessEqThan() != null)
        {
            node.GetLessEqThan().Apply(this);
        }
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        OutALesseqExpression4(node);
    }
    public virtual void InAGreatthanExpression4(AGreatthanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatthanExpression4(AGreatthanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatthanExpression4(AGreatthanExpression4 node)
    {
        InAGreatthanExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        OutAGreatthanExpression4(node);
    }
    public virtual void InALessthanExpression4(ALessthanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessthanExpression4(ALessthanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessthanExpression4(ALessthanExpression4 node)
    {
        InALessthanExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        OutALessthanExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAAddExpressionMath1(AAddExpressionMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpressionMath1(AAddExpressionMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpressionMath1(AAddExpressionMath1 node)
    {
        InAAddExpressionMath1(node);
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpressionMath2() != null)
        {
            node.GetExpressionMath2().Apply(this);
        }
        OutAAddExpressionMath1(node);
    }
    public virtual void InASubtractExpressionMath1(ASubtractExpressionMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpressionMath1(ASubtractExpressionMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpressionMath1(ASubtractExpressionMath1 node)
    {
        InASubtractExpressionMath1(node);
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpressionMath2() != null)
        {
            node.GetExpressionMath2().Apply(this);
        }
        OutASubtractExpressionMath1(node);
    }
    public virtual void InAPassExpressionMath1(APassExpressionMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpressionMath1(APassExpressionMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpressionMath1(APassExpressionMath1 node)
    {
        InAPassExpressionMath1(node);
        if(node.GetExpressionMath2() != null)
        {
            node.GetExpressionMath2().Apply(this);
        }
        OutAPassExpressionMath1(node);
    }
    public virtual void InAMultiplyExpressionMath2(AMultiplyExpressionMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpressionMath2(AMultiplyExpressionMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpressionMath2(AMultiplyExpressionMath2 node)
    {
        InAMultiplyExpressionMath2(node);
        if(node.GetExpressionMath2() != null)
        {
            node.GetExpressionMath2().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpressionMath3() != null)
        {
            node.GetExpressionMath3().Apply(this);
        }
        OutAMultiplyExpressionMath2(node);
    }
    public virtual void InADivideExpressionMath2(ADivideExpressionMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpressionMath2(ADivideExpressionMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpressionMath2(ADivideExpressionMath2 node)
    {
        InADivideExpressionMath2(node);
        if(node.GetExpressionMath2() != null)
        {
            node.GetExpressionMath2().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpressionMath3() != null)
        {
            node.GetExpressionMath3().Apply(this);
        }
        OutADivideExpressionMath2(node);
    }
    public virtual void InAPassExpressionMath2(APassExpressionMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpressionMath2(APassExpressionMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpressionMath2(APassExpressionMath2 node)
    {
        InAPassExpressionMath2(node);
        if(node.GetExpressionMath3() != null)
        {
            node.GetExpressionMath3().Apply(this);
        }
        OutAPassExpressionMath2(node);
    }
    public virtual void InANegativeExpressionMath3(ANegativeExpressionMath3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpressionMath3(ANegativeExpressionMath3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpressionMath3(ANegativeExpressionMath3 node)
    {
        InANegativeExpressionMath3(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpressionMath4() != null)
        {
            node.GetExpressionMath4().Apply(this);
        }
        OutANegativeExpressionMath3(node);
    }
    public virtual void InABitnotExpressionMath3(ABitnotExpressionMath3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABitnotExpressionMath3(ABitnotExpressionMath3 node)
    {
        DefaultOut(node);
    }

    public override void CaseABitnotExpressionMath3(ABitnotExpressionMath3 node)
    {
        InABitnotExpressionMath3(node);
        if(node.GetBitNot() != null)
        {
            node.GetBitNot().Apply(this);
        }
        if(node.GetExpressionMath4() != null)
        {
            node.GetExpressionMath4().Apply(this);
        }
        OutABitnotExpressionMath3(node);
    }
    public virtual void InAPassExpressionMath3(APassExpressionMath3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpressionMath3(APassExpressionMath3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpressionMath3(APassExpressionMath3 node)
    {
        InAPassExpressionMath3(node);
        if(node.GetExpressionMath4() != null)
        {
            node.GetExpressionMath4().Apply(this);
        }
        OutAPassExpressionMath3(node);
    }
    public virtual void InAParenthesisExpressionMath4(AParenthesisExpressionMath4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExpressionMath4(AParenthesisExpressionMath4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExpressionMath4(AParenthesisExpressionMath4 node)
    {
        InAParenthesisExpressionMath4(node);
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        OutAParenthesisExpressionMath4(node);
    }
    public virtual void InAPassExpressionMath4(APassExpressionMath4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpressionMath4(APassExpressionMath4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpressionMath4(APassExpressionMath4 node)
    {
        InAPassExpressionMath4(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpressionMath4(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloOperand(AFloOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloOperand(AFloOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloOperand(AFloOperand node)
    {
        InAFloOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloOperand(node);
    }
    public virtual void InAStrOperand(AStrOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStrOperand(AStrOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStrOperand(AStrOperand node)
    {
        InAStrOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStrOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainState() != null)
        {
            node.GetMainState().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMainState(AMainState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainState(AMainState node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainState(AMainState node)
    {
        InAMainState(node);
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetMainDef() != null)
        {
            node.GetMainDef().Apply(this);
        }
        OutAMainState(node);
    }
    public virtual void InAMultipleConstantsConstants(AMultipleConstantsConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConstantsConstants(AMultipleConstantsConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConstantsConstants(AMultipleConstantsConstants node)
    {
        InAMultipleConstantsConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        OutAMultipleConstantsConstants(node);
    }
    public virtual void InANoConstantsConstants(ANoConstantsConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoConstantsConstants(ANoConstantsConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoConstantsConstants(ANoConstantsConstants node)
    {
        InANoConstantsConstants(node);
        OutANoConstantsConstants(node);
    }
    public virtual void InAConstantDeclareConstant(AConstantDeclareConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclareConstant(AConstantDeclareConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclareConstant(AConstantDeclareConstant node)
    {
        InAConstantDeclareConstant(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetDefine() != null)
        {
            node.GetDefine().Apply(this);
        }
        OutAConstantDeclareConstant(node);
    }
    public virtual void InAMultipleFunctionsFunctions(AMultipleFunctionsFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFunctionsFunctions(AMultipleFunctionsFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFunctionsFunctions(AMultipleFunctionsFunctions node)
    {
        InAMultipleFunctionsFunctions(node);
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAMultipleFunctionsFunctions(node);
    }
    public virtual void InANoFunctionsFunctions(ANoFunctionsFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoFunctionsFunctions(ANoFunctionsFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseANoFunctionsFunctions(ANoFunctionsFunctions node)
    {
        InANoFunctionsFunctions(node);
        OutANoFunctionsFunctions(node);
    }
    public virtual void InAFunction(AFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunction(AFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunction(AFunction node)
    {
        InAFunction(node);
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFunc() != null)
        {
            node.GetFunc().Apply(this);
        }
        OutAFunction(node);
    }
    public virtual void InAManyParams(AManyParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyParams(AManyParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyParams(AManyParams node)
    {
        InAManyParams(node);
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        OutAManyParams(node);
    }
    public virtual void InAOneParams(AOneParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneParams(AOneParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneParams(AOneParams node)
    {
        InAOneParams(node);
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        OutAOneParams(node);
    }
    public virtual void InAOneParamParam(AOneParamParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneParamParam(AOneParamParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneParamParam(AOneParamParam node)
    {
        InAOneParamParam(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAOneParamParam(node);
    }
    public virtual void InANoParamParam(ANoParamParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParamParam(ANoParamParam node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParamParam(ANoParamParam node)
    {
        InANoParamParam(node);
        OutANoParamParam(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InANoStatementsStatements(ANoStatementsStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoStatementsStatements(ANoStatementsStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseANoStatementsStatements(ANoStatementsStatements node)
    {
        InANoStatementsStatements(node);
        OutANoStatementsStatements(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAFuncCallStatement(AFuncCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncCallStatement(AFuncCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncCallStatement(AFuncCallStatement node)
    {
        InAFuncCallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutAFuncCallStatement(node);
    }
    public virtual void InAIfstateStatement(AIfstateStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfstateStatement(AIfstateStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfstateStatement(AIfstateStatement node)
    {
        InAIfstateStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfstateStatement(node);
    }
    public virtual void InAWhileLoopStatement(AWhileLoopStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileLoopStatement(AWhileLoopStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileLoopStatement(AWhileLoopStatement node)
    {
        InAWhileLoopStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileLoopStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InAManyActualParameters(AManyActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAManyActualParameters(AManyActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAManyActualParameters(AManyActualParameters node)
    {
        InAManyActualParameters(node);
        if(node.GetActualParameters() != null)
        {
            node.GetActualParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualParam() != null)
        {
            node.GetActualParam().Apply(this);
        }
        OutAManyActualParameters(node);
    }
    public virtual void InASingleActualParameters(ASingleActualParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleActualParameters(ASingleActualParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleActualParameters(ASingleActualParameters node)
    {
        InASingleActualParameters(node);
        if(node.GetActualParam() != null)
        {
            node.GetActualParam().Apply(this);
        }
        OutASingleActualParameters(node);
    }
    public virtual void InAActualParamActualParam(AActualParamActualParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAActualParamActualParam(AActualParamActualParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAActualParamActualParam(AActualParamActualParam node)
    {
        InAActualParamActualParam(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAActualParamActualParam(node);
    }
    public virtual void InANoActualParamActualParam(ANoActualParamActualParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoActualParamActualParam(ANoActualParamActualParam node)
    {
        DefaultOut(node);
    }

    public override void CaseANoActualParamActualParam(ANoActualParamActualParam node)
    {
        InANoActualParamActualParam(node);
        OutANoActualParamActualParam(node);
    }
    public virtual void InAJustifIfStatement(AJustifIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAJustifIfStatement(AJustifIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAJustifIfStatement(AJustifIfStatement node)
    {
        InAJustifIfStatement(node);
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAJustifIfStatement(node);
    }
    public virtual void InAIfelseIfStatement(AIfelseIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfelseIfStatement(AIfelseIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfelseIfStatement(AIfelseIfStatement node)
    {
        InAIfelseIfStatement(node);
        if(node.GetElseCloseBracket() != null)
        {
            node.GetElseCloseBracket().Apply(this);
        }
        if(node.GetElseStatements() != null)
        {
            node.GetElseStatements().Apply(this);
        }
        if(node.GetElseOpenBracket() != null)
        {
            node.GetElseOpenBracket().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetIfCloseBracket() != null)
        {
            node.GetIfCloseBracket().Apply(this);
        }
        if(node.GetIfStatements() != null)
        {
            node.GetIfStatements().Apply(this);
        }
        if(node.GetIfOpenBracket() != null)
        {
            node.GetIfOpenBracket().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfelseIfStatement(node);
    }
    public virtual void InAWhileWhileStatement(AWhileWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileWhileStatement(AWhileWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileWhileStatement(AWhileWhileStatement node)
    {
        InAWhileWhileStatement(node);
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileWhileStatement(node);
    }
    public virtual void InABitorExpression(ABitorExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutABitorExpression(ABitorExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseABitorExpression(ABitorExpression node)
    {
        InABitorExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetBitOr() != null)
        {
            node.GetBitOr().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutABitorExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InABitandExpression2(ABitandExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABitandExpression2(ABitandExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseABitandExpression2(ABitandExpression2 node)
    {
        InABitandExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetBitAnd() != null)
        {
            node.GetBitAnd().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutABitandExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAEquivalentExpression3(AEquivalentExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEquivalentExpression3(AEquivalentExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEquivalentExpression3(AEquivalentExpression3 node)
    {
        InAEquivalentExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetEquivalence() != null)
        {
            node.GetEquivalence().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAEquivalentExpression3(node);
    }
    public virtual void InANotequivalentExpression3(ANotequivalentExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotequivalentExpression3(ANotequivalentExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotequivalentExpression3(ANotequivalentExpression3 node)
    {
        InANotequivalentExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetNotEquivalent() != null)
        {
            node.GetNotEquivalent().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutANotequivalentExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InAGreateqExpression4(AGreateqExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreateqExpression4(AGreateqExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreateqExpression4(AGreateqExpression4 node)
    {
        InAGreateqExpression4(node);
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        if(node.GetGreatEqThan() != null)
        {
            node.GetGreatEqThan().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAGreateqExpression4(node);
    }
    public virtual void InALesseqExpression4(ALesseqExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALesseqExpression4(ALesseqExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALesseqExpression4(ALesseqExpression4 node)
    {
        InALesseqExpression4(node);
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        if(node.GetLessEqThan() != null)
        {
            node.GetLessEqThan().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutALesseqExpression4(node);
    }
    public virtual void InAGreatthanExpression4(AGreatthanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatthanExpression4(AGreatthanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatthanExpression4(AGreatthanExpression4 node)
    {
        InAGreatthanExpression4(node);
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAGreatthanExpression4(node);
    }
    public virtual void InALessthanExpression4(ALessthanExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessthanExpression4(ALessthanExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessthanExpression4(ALessthanExpression4 node)
    {
        InALessthanExpression4(node);
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutALessthanExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAAddExpressionMath1(AAddExpressionMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpressionMath1(AAddExpressionMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpressionMath1(AAddExpressionMath1 node)
    {
        InAAddExpressionMath1(node);
        if(node.GetExpressionMath2() != null)
        {
            node.GetExpressionMath2().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        OutAAddExpressionMath1(node);
    }
    public virtual void InASubtractExpressionMath1(ASubtractExpressionMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpressionMath1(ASubtractExpressionMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpressionMath1(ASubtractExpressionMath1 node)
    {
        InASubtractExpressionMath1(node);
        if(node.GetExpressionMath2() != null)
        {
            node.GetExpressionMath2().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        OutASubtractExpressionMath1(node);
    }
    public virtual void InAPassExpressionMath1(APassExpressionMath1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpressionMath1(APassExpressionMath1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpressionMath1(APassExpressionMath1 node)
    {
        InAPassExpressionMath1(node);
        if(node.GetExpressionMath2() != null)
        {
            node.GetExpressionMath2().Apply(this);
        }
        OutAPassExpressionMath1(node);
    }
    public virtual void InAMultiplyExpressionMath2(AMultiplyExpressionMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpressionMath2(AMultiplyExpressionMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpressionMath2(AMultiplyExpressionMath2 node)
    {
        InAMultiplyExpressionMath2(node);
        if(node.GetExpressionMath3() != null)
        {
            node.GetExpressionMath3().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpressionMath2() != null)
        {
            node.GetExpressionMath2().Apply(this);
        }
        OutAMultiplyExpressionMath2(node);
    }
    public virtual void InADivideExpressionMath2(ADivideExpressionMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpressionMath2(ADivideExpressionMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpressionMath2(ADivideExpressionMath2 node)
    {
        InADivideExpressionMath2(node);
        if(node.GetExpressionMath3() != null)
        {
            node.GetExpressionMath3().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpressionMath2() != null)
        {
            node.GetExpressionMath2().Apply(this);
        }
        OutADivideExpressionMath2(node);
    }
    public virtual void InAPassExpressionMath2(APassExpressionMath2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpressionMath2(APassExpressionMath2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpressionMath2(APassExpressionMath2 node)
    {
        InAPassExpressionMath2(node);
        if(node.GetExpressionMath3() != null)
        {
            node.GetExpressionMath3().Apply(this);
        }
        OutAPassExpressionMath2(node);
    }
    public virtual void InANegativeExpressionMath3(ANegativeExpressionMath3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpressionMath3(ANegativeExpressionMath3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpressionMath3(ANegativeExpressionMath3 node)
    {
        InANegativeExpressionMath3(node);
        if(node.GetExpressionMath4() != null)
        {
            node.GetExpressionMath4().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegativeExpressionMath3(node);
    }
    public virtual void InABitnotExpressionMath3(ABitnotExpressionMath3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutABitnotExpressionMath3(ABitnotExpressionMath3 node)
    {
        DefaultOut(node);
    }

    public override void CaseABitnotExpressionMath3(ABitnotExpressionMath3 node)
    {
        InABitnotExpressionMath3(node);
        if(node.GetExpressionMath4() != null)
        {
            node.GetExpressionMath4().Apply(this);
        }
        if(node.GetBitNot() != null)
        {
            node.GetBitNot().Apply(this);
        }
        OutABitnotExpressionMath3(node);
    }
    public virtual void InAPassExpressionMath3(APassExpressionMath3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpressionMath3(APassExpressionMath3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpressionMath3(APassExpressionMath3 node)
    {
        InAPassExpressionMath3(node);
        if(node.GetExpressionMath4() != null)
        {
            node.GetExpressionMath4().Apply(this);
        }
        OutAPassExpressionMath3(node);
    }
    public virtual void InAParenthesisExpressionMath4(AParenthesisExpressionMath4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExpressionMath4(AParenthesisExpressionMath4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExpressionMath4(AParenthesisExpressionMath4 node)
    {
        InAParenthesisExpressionMath4(node);
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetExpressionMath1() != null)
        {
            node.GetExpressionMath1().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        OutAParenthesisExpressionMath4(node);
    }
    public virtual void InAPassExpressionMath4(APassExpressionMath4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpressionMath4(APassExpressionMath4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpressionMath4(APassExpressionMath4 node)
    {
        InAPassExpressionMath4(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpressionMath4(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAFloOperand(AFloOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloOperand(AFloOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloOperand(AFloOperand node)
    {
        InAFloOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloOperand(node);
    }
    public virtual void InAStrOperand(AStrOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStrOperand(AStrOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStrOperand(AStrOperand node)
    {
        InAStrOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStrOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}
} // namespace CS426.analysis
