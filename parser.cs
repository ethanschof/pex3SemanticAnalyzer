/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using CS426.node;
using CS426.lexer;
using CS426.analysis;

namespace CS426.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTAssign(TAssign node)
    {
        index = 0;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 1;
    }

    public override void CaseTMinus(TMinus node)
    {
        index = 2;
    }

    public override void CaseTMult(TMult node)
    {
        index = 3;
    }

    public override void CaseTDivide(TDivide node)
    {
        index = 4;
    }

    public override void CaseTEol(TEol node)
    {
        index = 5;
    }

    public override void CaseTBitAnd(TBitAnd node)
    {
        index = 6;
    }

    public override void CaseTBitOr(TBitOr node)
    {
        index = 7;
    }

    public override void CaseTBitNot(TBitNot node)
    {
        index = 8;
    }

    public override void CaseTEquivalence(TEquivalence node)
    {
        index = 9;
    }

    public override void CaseTNotEquivalent(TNotEquivalent node)
    {
        index = 10;
    }

    public override void CaseTGreaterThan(TGreaterThan node)
    {
        index = 11;
    }

    public override void CaseTLessThan(TLessThan node)
    {
        index = 12;
    }

    public override void CaseTGreatEqThan(TGreatEqThan node)
    {
        index = 13;
    }

    public override void CaseTLessEqThan(TLessEqThan node)
    {
        index = 14;
    }

    public override void CaseTOpenParenthesis(TOpenParenthesis node)
    {
        index = 15;
    }

    public override void CaseTCloseParenthesis(TCloseParenthesis node)
    {
        index = 16;
    }

    public override void CaseTOpenBracket(TOpenBracket node)
    {
        index = 17;
    }

    public override void CaseTCloseBracket(TCloseBracket node)
    {
        index = 18;
    }

    public override void CaseTComma(TComma node)
    {
        index = 19;
    }

    public override void CaseTIf(TIf node)
    {
        index = 20;
    }

    public override void CaseTElse(TElse node)
    {
        index = 21;
    }

    public override void CaseTWhile(TWhile node)
    {
        index = 22;
    }

    public override void CaseTDefine(TDefine node)
    {
        index = 23;
    }

    public override void CaseTFunc(TFunc node)
    {
        index = 24;
    }

    public override void CaseTMainDef(TMainDef node)
    {
        index = 25;
    }

    public override void CaseTId(TId node)
    {
        index = 26;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 27;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 28;
    }

    public override void CaseTString(TString node)
    {
        index = 29;
    }

    public override void CaseEOF(EOF node)
    {
        index = 30;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(3), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(4), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(5), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(5), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(6), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(6), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(7), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(7), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(8), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(8), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(8), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(8), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(8), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(9), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(10), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(11), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(12), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(12), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(13), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(13), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(14), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(14), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(15), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(16), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(16), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(17), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(17), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(18), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(18), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(18), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(19), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(19), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(19), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(19), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(19), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(20), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(20), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(20), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(21), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(21), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(21), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(22), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(22), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(22), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(23), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(23), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(24), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(24), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(24), list);
        }
        break;
                    case 54:
        {
      ArrayList list = New54();
      Push(GoTo(24), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstants pconstantsNode2 = (PConstants)nodeArrayList1[0];
        PFunctions pfunctionsNode3 = (PFunctions)nodeArrayList2[0];
        TMainDef tmaindefNode4 = (TMainDef)nodeArrayList3[0];
        TOpenBracket topenbracketNode5 = (TOpenBracket)nodeArrayList4[0];
        PStatements pstatementsNode6 = (PStatements)nodeArrayList5[0];
        TCloseBracket tclosebracketNode7 = (TCloseBracket)nodeArrayList6[0];
        AProgram pprogramNode1 = new AProgram (
              pconstantsNode2,
              pfunctionsNode3,
              tmaindefNode4,
              topenbracketNode5,
              pstatementsNode6,
              tclosebracketNode7
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstant pconstantNode2 = (PConstant)nodeArrayList1[0];
        PConstants pconstantsNode3 = (PConstants)nodeArrayList2[0];
        AMultipleConstantsConstants pconstantsNode1 = new AMultipleConstantsConstants (
              pconstantNode2,
              pconstantsNode3
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ANoConstantsConstants pconstantsNode1 = new ANoConstantsConstants (
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TDefine tdefineNode2 = (TDefine)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TId tidNode4 = (TId)nodeArrayList3[0];
        TAssign tassignNode5 = (TAssign)nodeArrayList4[0];
        PExpression pexpressionNode6 = (PExpression)nodeArrayList5[0];
        TEol teolNode7 = (TEol)nodeArrayList6[0];
        AConstantDeclareConstant pconstantNode1 = new AConstantDeclareConstant (
              tdefineNode2,
              tidNode3,
              tidNode4,
              tassignNode5,
              pexpressionNode6,
              teolNode7
        );
        nodeList.Add(pconstantNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunction pfunctionNode2 = (PFunction)nodeArrayList1[0];
        PFunctions pfunctionsNode3 = (PFunctions)nodeArrayList2[0];
        AMultipleFunctionsFunctions pfunctionsNode1 = new AMultipleFunctionsFunctions (
              pfunctionNode2,
              pfunctionsNode3
        );
        nodeList.Add(pfunctionsNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ANoFunctionsFunctions pfunctionsNode1 = new ANoFunctionsFunctions (
        );
        nodeList.Add(pfunctionsNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFunc tfuncNode2 = (TFunc)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TOpenParenthesis topenparenthesisNode4 = (TOpenParenthesis)nodeArrayList3[0];
        PParams pparamsNode5 = (PParams)nodeArrayList4[0];
        TCloseParenthesis tcloseparenthesisNode6 = (TCloseParenthesis)nodeArrayList5[0];
        TOpenBracket topenbracketNode7 = (TOpenBracket)nodeArrayList6[0];
        PStatements pstatementsNode8 = (PStatements)nodeArrayList7[0];
        TCloseBracket tclosebracketNode9 = (TCloseBracket)nodeArrayList8[0];
        AOneFunctionFunction pfunctionNode1 = new AOneFunctionFunction (
              tfuncNode2,
              tidNode3,
              topenparenthesisNode4,
              pparamsNode5,
              tcloseparenthesisNode6,
              topenbracketNode7,
              pstatementsNode8,
              tclosebracketNode9
        );
        nodeList.Add(pfunctionNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParam pparamNode2 = (PParam)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PParams pparamsNode4 = (PParams)nodeArrayList3[0];
        AManyParams pparamsNode1 = new AManyParams (
              pparamNode2,
              tcommaNode3,
              pparamsNode4
        );
        nodeList.Add(pparamsNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParam pparamNode2 = (PParam)nodeArrayList1[0];
        AOneParams pparamsNode1 = new AOneParams (
              pparamNode2
        );
        nodeList.Add(pparamsNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        AOneParamParam pparamNode1 = new AOneParamParam (
              tidNode2,
              tidNode3
        );
        nodeList.Add(pparamNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ANoParamParam pparamNode1 = new ANoParamParam (
        );
        nodeList.Add(pparamNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatement pstatementNode2 = (PStatement)nodeArrayList1[0];
        PStatements pstatementsNode3 = (PStatements)nodeArrayList2[0];
        AMultipleStatements pstatementsNode1 = new AMultipleStatements (
              pstatementNode2,
              pstatementsNode3
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ANoStatementsStatements pstatementsNode1 = new ANoStatementsStatements (
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignStatement passignstatementNode2 = (PAssignStatement)nodeArrayList1[0];
        AAssignmentStatement pstatementNode1 = new AAssignmentStatement (
              passignstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclareStatement pdeclarestatementNode2 = (PDeclareStatement)nodeArrayList1[0];
        ADeclarationStatement pstatementNode1 = new ADeclarationStatement (
              pdeclarestatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctionCallStatement pfunctioncallstatementNode2 = (PFunctionCallStatement)nodeArrayList1[0];
        AFuncCallStatement pstatementNode1 = new AFuncCallStatement (
              pfunctioncallstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfStatement pifstatementNode2 = (PIfStatement)nodeArrayList1[0];
        AIfstateStatement pstatementNode1 = new AIfstateStatement (
              pifstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhileStatement pwhilestatementNode2 = (PWhileStatement)nodeArrayList1[0];
        AWhileLoopStatement pstatementNode1 = new AWhileLoopStatement (
              pwhilestatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TEol teolNode4 = (TEol)nodeArrayList3[0];
        AVariableDeclareDeclareStatement pdeclarestatementNode1 = new AVariableDeclareDeclareStatement (
              tidNode2,
              tidNode3,
              teolNode4
        );
        nodeList.Add(pdeclarestatementNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AMathAssignAssignStatement passignstatementNode1 = new AMathAssignAssignStatement (
              tidNode2,
              tassignNode3,
              pexpressionNode4,
              teolNode5
        );
        nodeList.Add(passignstatementNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TOpenParenthesis topenparenthesisNode3 = (TOpenParenthesis)nodeArrayList2[0];
        PActualParameters pactualparametersNode4 = (PActualParameters)nodeArrayList3[0];
        TCloseParenthesis tcloseparenthesisNode5 = (TCloseParenthesis)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        AActualParamFunctionCallStatement pfunctioncallstatementNode1 = new AActualParamFunctionCallStatement (
              tidNode2,
              topenparenthesisNode3,
              pactualparametersNode4,
              tcloseparenthesisNode5,
              teolNode6
        );
        nodeList.Add(pfunctioncallstatementNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PActualParam pactualparamNode2 = (PActualParam)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PActualParameters pactualparametersNode4 = (PActualParameters)nodeArrayList3[0];
        AManyActualParameters pactualparametersNode1 = new AManyActualParameters (
              pactualparamNode2,
              tcommaNode3,
              pactualparametersNode4
        );
        nodeList.Add(pactualparametersNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PActualParam pactualparamNode2 = (PActualParam)nodeArrayList1[0];
        ASingleActualParameters pactualparametersNode1 = new ASingleActualParameters (
              pactualparamNode2
        );
        nodeList.Add(pactualparametersNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        AActualParamActualParam pactualparamNode1 = new AActualParamActualParam (
              pexpressionNode2
        );
        nodeList.Add(pactualparamNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ANoActualParamActualParam pactualparamNode1 = new ANoActualParamActualParam (
        );
        nodeList.Add(pactualparamNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TOpenParenthesis topenparenthesisNode3 = (TOpenParenthesis)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TCloseParenthesis tcloseparenthesisNode5 = (TCloseParenthesis)nodeArrayList4[0];
        TOpenBracket topenbracketNode6 = (TOpenBracket)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TCloseBracket tclosebracketNode8 = (TCloseBracket)nodeArrayList7[0];
        AJustifIfStatement pifstatementNode1 = new AJustifIfStatement (
              tifNode2,
              topenparenthesisNode3,
              pexpressionNode4,
              tcloseparenthesisNode5,
              topenbracketNode6,
              pstatementsNode7,
              tclosebracketNode8
        );
        nodeList.Add(pifstatementNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList11 = (ArrayList) Pop();
        ArrayList nodeArrayList10 = (ArrayList) Pop();
        ArrayList nodeArrayList9 = (ArrayList) Pop();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TOpenParenthesis topenparenthesisNode3 = (TOpenParenthesis)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TCloseParenthesis tcloseparenthesisNode5 = (TCloseParenthesis)nodeArrayList4[0];
        TOpenBracket topenbracketNode6 = (TOpenBracket)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TCloseBracket tclosebracketNode8 = (TCloseBracket)nodeArrayList7[0];
        TElse telseNode9 = (TElse)nodeArrayList8[0];
        TOpenBracket topenbracketNode10 = (TOpenBracket)nodeArrayList9[0];
        PStatements pstatementsNode11 = (PStatements)nodeArrayList10[0];
        TCloseBracket tclosebracketNode12 = (TCloseBracket)nodeArrayList11[0];
        AIfelseIfStatement pifstatementNode1 = new AIfelseIfStatement (
              tifNode2,
              topenparenthesisNode3,
              pexpressionNode4,
              tcloseparenthesisNode5,
              topenbracketNode6,
              pstatementsNode7,
              tclosebracketNode8,
              telseNode9,
              topenbracketNode10,
              pstatementsNode11,
              tclosebracketNode12
        );
        nodeList.Add(pifstatementNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TWhile twhileNode2 = (TWhile)nodeArrayList1[0];
        TOpenParenthesis topenparenthesisNode3 = (TOpenParenthesis)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TCloseParenthesis tcloseparenthesisNode5 = (TCloseParenthesis)nodeArrayList4[0];
        TOpenBracket topenbracketNode6 = (TOpenBracket)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TCloseBracket tclosebracketNode8 = (TCloseBracket)nodeArrayList7[0];
        AWhileWhileStatement pwhilestatementNode1 = new AWhileWhileStatement (
              twhileNode2,
              topenparenthesisNode3,
              pexpressionNode4,
              tcloseparenthesisNode5,
              topenbracketNode6,
              pstatementsNode7,
              tclosebracketNode8
        );
        nodeList.Add(pwhilestatementNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TBitOr tbitorNode3 = (TBitOr)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        ABitorExpression pexpressionNode1 = new ABitorExpression (
              pexpressionNode2,
              tbitorNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        APassExpression pexpressionNode1 = new APassExpression (
              pexpression2Node2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TBitAnd tbitandNode3 = (TBitAnd)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        ABitandExpression2 pexpression2Node1 = new ABitandExpression2 (
              pexpression2Node2,
              tbitandNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        APassExpression2 pexpression2Node1 = new APassExpression2 (
              pexpression3Node2
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        TEquivalence tequivalenceNode3 = (TEquivalence)nodeArrayList2[0];
        PExpression4 pexpression4Node4 = (PExpression4)nodeArrayList3[0];
        AEquivalentExpression3 pexpression3Node1 = new AEquivalentExpression3 (
              pexpression3Node2,
              tequivalenceNode3,
              pexpression4Node4
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        TNotEquivalent tnotequivalentNode3 = (TNotEquivalent)nodeArrayList2[0];
        PExpression4 pexpression4Node4 = (PExpression4)nodeArrayList3[0];
        ANotequivalentExpression3 pexpression3Node1 = new ANotequivalentExpression3 (
              pexpression3Node2,
              tnotequivalentNode3,
              pexpression4Node4
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        APassExpression3 pexpression3Node1 = new APassExpression3 (
              pexpression4Node2
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        TGreatEqThan tgreateqthanNode3 = (TGreatEqThan)nodeArrayList2[0];
        PExpressionMath1 pexpressionmath1Node4 = (PExpressionMath1)nodeArrayList3[0];
        AGreateqExpression4 pexpression4Node1 = new AGreateqExpression4 (
              pexpression4Node2,
              tgreateqthanNode3,
              pexpressionmath1Node4
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        TLessEqThan tlesseqthanNode3 = (TLessEqThan)nodeArrayList2[0];
        PExpressionMath1 pexpressionmath1Node4 = (PExpressionMath1)nodeArrayList3[0];
        ALesseqExpression4 pexpression4Node1 = new ALesseqExpression4 (
              pexpression4Node2,
              tlesseqthanNode3,
              pexpressionmath1Node4
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        TGreaterThan tgreaterthanNode3 = (TGreaterThan)nodeArrayList2[0];
        PExpressionMath1 pexpressionmath1Node4 = (PExpressionMath1)nodeArrayList3[0];
        AGreatthanExpression4 pexpression4Node1 = new AGreatthanExpression4 (
              pexpression4Node2,
              tgreaterthanNode3,
              pexpressionmath1Node4
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        TLessThan tlessthanNode3 = (TLessThan)nodeArrayList2[0];
        PExpressionMath1 pexpressionmath1Node4 = (PExpressionMath1)nodeArrayList3[0];
        ALessthanExpression4 pexpression4Node1 = new ALessthanExpression4 (
              pexpression4Node2,
              tlessthanNode3,
              pexpressionmath1Node4
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressionMath1 pexpressionmath1Node2 = (PExpressionMath1)nodeArrayList1[0];
        APassExpression4 pexpression4Node1 = new APassExpression4 (
              pexpressionmath1Node2
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressionMath1 pexpressionmath1Node2 = (PExpressionMath1)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PExpressionMath2 pexpressionmath2Node4 = (PExpressionMath2)nodeArrayList3[0];
        AAddExpressionMath1 pexpressionmath1Node1 = new AAddExpressionMath1 (
              pexpressionmath1Node2,
              tplusNode3,
              pexpressionmath2Node4
        );
        nodeList.Add(pexpressionmath1Node1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressionMath1 pexpressionmath1Node2 = (PExpressionMath1)nodeArrayList1[0];
        TMinus tminusNode3 = (TMinus)nodeArrayList2[0];
        PExpressionMath2 pexpressionmath2Node4 = (PExpressionMath2)nodeArrayList3[0];
        ASubtractExpressionMath1 pexpressionmath1Node1 = new ASubtractExpressionMath1 (
              pexpressionmath1Node2,
              tminusNode3,
              pexpressionmath2Node4
        );
        nodeList.Add(pexpressionmath1Node1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressionMath2 pexpressionmath2Node2 = (PExpressionMath2)nodeArrayList1[0];
        APassExpressionMath1 pexpressionmath1Node1 = new APassExpressionMath1 (
              pexpressionmath2Node2
        );
        nodeList.Add(pexpressionmath1Node1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressionMath2 pexpressionmath2Node2 = (PExpressionMath2)nodeArrayList1[0];
        TMult tmultNode3 = (TMult)nodeArrayList2[0];
        PExpressionMath3 pexpressionmath3Node4 = (PExpressionMath3)nodeArrayList3[0];
        AMultiplyExpressionMath2 pexpressionmath2Node1 = new AMultiplyExpressionMath2 (
              pexpressionmath2Node2,
              tmultNode3,
              pexpressionmath3Node4
        );
        nodeList.Add(pexpressionmath2Node1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressionMath2 pexpressionmath2Node2 = (PExpressionMath2)nodeArrayList1[0];
        TDivide tdivideNode3 = (TDivide)nodeArrayList2[0];
        PExpressionMath3 pexpressionmath3Node4 = (PExpressionMath3)nodeArrayList3[0];
        ADivideExpressionMath2 pexpressionmath2Node1 = new ADivideExpressionMath2 (
              pexpressionmath2Node2,
              tdivideNode3,
              pexpressionmath3Node4
        );
        nodeList.Add(pexpressionmath2Node1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressionMath3 pexpressionmath3Node2 = (PExpressionMath3)nodeArrayList1[0];
        APassExpressionMath2 pexpressionmath2Node1 = new APassExpressionMath2 (
              pexpressionmath3Node2
        );
        nodeList.Add(pexpressionmath2Node1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        PExpressionMath4 pexpressionmath4Node3 = (PExpressionMath4)nodeArrayList2[0];
        ANegativeExpressionMath3 pexpressionmath3Node1 = new ANegativeExpressionMath3 (
              tminusNode2,
              pexpressionmath4Node3
        );
        nodeList.Add(pexpressionmath3Node1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TBitNot tbitnotNode2 = (TBitNot)nodeArrayList1[0];
        PExpressionMath4 pexpressionmath4Node3 = (PExpressionMath4)nodeArrayList2[0];
        ABitnotExpressionMath3 pexpressionmath3Node1 = new ABitnotExpressionMath3 (
              tbitnotNode2,
              pexpressionmath4Node3
        );
        nodeList.Add(pexpressionmath3Node1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressionMath4 pexpressionmath4Node2 = (PExpressionMath4)nodeArrayList1[0];
        APassExpressionMath3 pexpressionmath3Node1 = new APassExpressionMath3 (
              pexpressionmath4Node2
        );
        nodeList.Add(pexpressionmath3Node1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TOpenParenthesis topenparenthesisNode2 = (TOpenParenthesis)nodeArrayList1[0];
        PExpressionMath1 pexpressionmath1Node3 = (PExpressionMath1)nodeArrayList2[0];
        TCloseParenthesis tcloseparenthesisNode4 = (TCloseParenthesis)nodeArrayList3[0];
        AParenthesisExpressionMath4 pexpressionmath4Node1 = new AParenthesisExpressionMath4 (
              topenparenthesisNode2,
              pexpressionmath1Node3,
              tcloseparenthesisNode4
        );
        nodeList.Add(pexpressionmath4Node1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POperand poperandNode2 = (POperand)nodeArrayList1[0];
        APassExpressionMath4 pexpressionmath4Node1 = new APassExpressionMath4 (
              poperandNode2
        );
        nodeList.Add(pexpressionmath4Node1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntOperand poperandNode1 = new AIntOperand (
              tintegerNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloat tfloatNode2 = (TFloat)nodeArrayList1[0];
        AFloOperand poperandNode1 = new AFloOperand (
              tfloatNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        AStrOperand poperandNode1 = new AStrOperand (
              tstringNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New54()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AVariableOperand poperandNode1 = new AVariableOperand (
              tidNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {23, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {26, 0, 5},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {30, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {24, 0, 6},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {23, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {26, 0, 10},
      },
      new int[][] {
        new int[] {-1, 3, 6},
        new int[] {26, 0, 11},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {25, 0, 12},
      },
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {24, 0, 6},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {0, 0, 14},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {15, 0, 15},
      },
      new int[][] {
        new int[] {-1, 3, 12},
        new int[] {17, 0, 16},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 3, 14},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 1, 10},
        new int[] {26, 0, 33},
      },
      new int[][] {
        new int[] {-1, 1, 12},
        new int[] {20, 0, 36},
        new int[] {22, 0, 37},
        new int[] {26, 0, 38},
      },
      new int[][] {
        new int[] {-1, 3, 17},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 1, 54},
      },
      new int[][] {
        new int[] {-1, 1, 51},
      },
      new int[][] {
        new int[] {-1, 1, 52},
      },
      new int[][] {
        new int[] {-1, 1, 53},
      },
      new int[][] {
        new int[] {-1, 3, 24},
        new int[] {5, 0, 49},
        new int[] {7, 0, 50},
      },
      new int[][] {
        new int[] {-1, 1, 29},
        new int[] {6, 0, 51},
      },
      new int[][] {
        new int[] {-1, 1, 31},
        new int[] {9, 0, 52},
        new int[] {10, 0, 53},
      },
      new int[][] {
        new int[] {-1, 1, 34},
        new int[] {11, 0, 54},
        new int[] {12, 0, 55},
        new int[] {13, 0, 56},
        new int[] {14, 0, 57},
      },
      new int[][] {
        new int[] {-1, 1, 39},
        new int[] {1, 0, 58},
        new int[] {2, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 42},
        new int[] {3, 0, 60},
        new int[] {4, 0, 61},
      },
      new int[][] {
        new int[] {-1, 1, 45},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 1, 50},
      },
      new int[][] {
        new int[] {-1, 3, 33},
        new int[] {26, 0, 62},
      },
      new int[][] {
        new int[] {-1, 3, 34},
        new int[] {16, 0, 63},
      },
      new int[][] {
        new int[] {-1, 1, 8},
        new int[] {19, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 36},
        new int[] {15, 0, 65},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {15, 0, 66},
      },
      new int[][] {
        new int[] {-1, 3, 38},
        new int[] {0, 0, 67},
        new int[] {15, 0, 68},
        new int[] {26, 0, 69},
      },
      new int[][] {
        new int[] {-1, 3, 39},
        new int[] {18, 0, 70},
      },
      new int[][] {
        new int[] {-1, 1, 12},
        new int[] {20, 0, 36},
        new int[] {22, 0, 37},
        new int[] {26, 0, 38},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 3, 48},
        new int[] {1, 0, 58},
        new int[] {2, 0, 59},
        new int[] {16, 0, 72},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 3, 50},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 51},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 52},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 53},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 54},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 55},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 56},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 57},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 58},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 59},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 60},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 61},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 3, 63},
        new int[] {17, 0, 85},
      },
      new int[][] {
        new int[] {-1, 1, 10},
        new int[] {26, 0, 33},
      },
      new int[][] {
        new int[] {-1, 3, 65},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 66},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 67},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 1, 24},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 3, 69},
        new int[] {5, 0, 93},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 49},
      },
      new int[][] {
        new int[] {-1, 1, 28},
        new int[] {6, 0, 51},
      },
      new int[][] {
        new int[] {-1, 1, 30},
        new int[] {9, 0, 52},
        new int[] {10, 0, 53},
      },
      new int[][] {
        new int[] {-1, 1, 32},
        new int[] {11, 0, 54},
        new int[] {12, 0, 55},
        new int[] {13, 0, 56},
        new int[] {14, 0, 57},
      },
      new int[][] {
        new int[] {-1, 1, 33},
        new int[] {11, 0, 54},
        new int[] {12, 0, 55},
        new int[] {13, 0, 56},
        new int[] {14, 0, 57},
      },
      new int[][] {
        new int[] {-1, 1, 37},
        new int[] {1, 0, 58},
        new int[] {2, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 38},
        new int[] {1, 0, 58},
        new int[] {2, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 35},
        new int[] {1, 0, 58},
        new int[] {2, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 36},
        new int[] {1, 0, 58},
        new int[] {2, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 40},
        new int[] {3, 0, 60},
        new int[] {4, 0, 61},
      },
      new int[][] {
        new int[] {-1, 1, 41},
        new int[] {3, 0, 60},
        new int[] {4, 0, 61},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 1, 44},
      },
      new int[][] {
        new int[] {-1, 1, 12},
        new int[] {20, 0, 36},
        new int[] {22, 0, 37},
        new int[] {26, 0, 38},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 3, 87},
        new int[] {7, 0, 50},
        new int[] {16, 0, 95},
      },
      new int[][] {
        new int[] {-1, 3, 88},
        new int[] {7, 0, 50},
        new int[] {16, 0, 96},
      },
      new int[][] {
        new int[] {-1, 3, 89},
        new int[] {5, 0, 97},
        new int[] {7, 0, 50},
      },
      new int[][] {
        new int[] {-1, 3, 90},
        new int[] {16, 0, 98},
      },
      new int[][] {
        new int[] {-1, 1, 22},
        new int[] {19, 0, 99},
      },
      new int[][] {
        new int[] {-1, 1, 23},
        new int[] {7, 0, 50},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 3, 94},
        new int[] {18, 0, 100},
      },
      new int[][] {
        new int[] {-1, 3, 95},
        new int[] {17, 0, 101},
      },
      new int[][] {
        new int[] {-1, 3, 96},
        new int[] {17, 0, 102},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 3, 98},
        new int[] {5, 0, 103},
      },
      new int[][] {
        new int[] {-1, 1, 24},
        new int[] {2, 0, 17},
        new int[] {8, 0, 18},
        new int[] {15, 0, 19},
        new int[] {26, 0, 20},
        new int[] {27, 0, 21},
        new int[] {28, 0, 22},
        new int[] {29, 0, 23},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 12},
        new int[] {20, 0, 36},
        new int[] {22, 0, 37},
        new int[] {26, 0, 38},
      },
      new int[][] {
        new int[] {-1, 1, 12},
        new int[] {20, 0, 36},
        new int[] {22, 0, 37},
        new int[] {26, 0, 38},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 3, 105},
        new int[] {18, 0, 107},
      },
      new int[][] {
        new int[] {-1, 3, 106},
        new int[] {18, 0, 108},
      },
      new int[][] {
        new int[] {-1, 1, 25},
        new int[] {21, 0, 109},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
      new int[][] {
        new int[] {-1, 3, 109},
        new int[] {17, 0, 110},
      },
      new int[][] {
        new int[] {-1, 1, 12},
        new int[] {20, 0, 36},
        new int[] {22, 0, 37},
        new int[] {26, 0, 38},
      },
      new int[][] {
        new int[] {-1, 3, 111},
        new int[] {18, 0, 112},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 3},
        new int[] {4, 9},
      },
      new int[][] {
        new int[] {-1, 4},
      },
      new int[][] {
        new int[] {-1, 7},
        new int[] {8, 13},
      },
      new int[][] {
        new int[] {-1, 8},
      },
      new int[][] {
        new int[] {-1, 34},
        new int[] {64, 86},
      },
      new int[][] {
        new int[] {-1, 35},
      },
      new int[][] {
        new int[] {-1, 39},
        new int[] {40, 71},
        new int[] {85, 94},
        new int[] {101, 105},
        new int[] {102, 106},
        new int[] {110, 111},
      },
      new int[][] {
        new int[] {-1, 40},
      },
      new int[][] {
        new int[] {-1, 41},
      },
      new int[][] {
        new int[] {-1, 42},
      },
      new int[][] {
        new int[] {-1, 43},
      },
      new int[][] {
        new int[] {-1, 90},
        new int[] {99, 104},
      },
      new int[][] {
        new int[] {-1, 91},
      },
      new int[][] {
        new int[] {-1, 44},
      },
      new int[][] {
        new int[] {-1, 45},
      },
      new int[][] {
        new int[] {-1, 92},
        new int[] {14, 24},
        new int[] {65, 87},
        new int[] {66, 88},
        new int[] {67, 89},
      },
      new int[][] {
        new int[] {-1, 25},
        new int[] {50, 73},
      },
      new int[][] {
        new int[] {-1, 26},
        new int[] {51, 74},
      },
      new int[][] {
        new int[] {-1, 27},
        new int[] {52, 75},
        new int[] {53, 76},
      },
      new int[][] {
        new int[] {-1, 28},
        new int[] {19, 48},
        new int[] {54, 77},
        new int[] {55, 78},
        new int[] {56, 79},
        new int[] {57, 80},
      },
      new int[][] {
        new int[] {-1, 29},
        new int[] {58, 81},
        new int[] {59, 82},
      },
      new int[][] {
        new int[] {-1, 30},
        new int[] {60, 83},
        new int[] {61, 84},
      },
      new int[][] {
        new int[] {-1, 31},
        new int[] {17, 46},
        new int[] {18, 47},
      },
      new int[][] {
        new int[] {-1, 32},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'def', 'func', 'main'",
      "expecting: id",
      "expecting: EOF",
      "expecting: 'func', 'main'",
      "expecting: 'main'",
      "expecting: '='",
      "expecting: '('",
      "expecting: '{'",
      "expecting: '-', 'NOT', '(', id, integer, float, string",
      "expecting: ')', ',', id",
      "expecting: '}', 'if', 'while', id",
      "expecting: '(', id, integer, float, string",
      "expecting: '+', '-', '*', '/', ';', 'AND', 'OR', '==', '!=', '>', '<', '>=', '<=', ')', ','",
      "expecting: ';', 'OR'",
      "expecting: ';', 'AND', 'OR', ')', ','",
      "expecting: ';', 'AND', 'OR', '==', '!=', ')', ','",
      "expecting: ';', 'AND', 'OR', '==', '!=', '>', '<', '>=', '<=', ')', ','",
      "expecting: '+', '-', ';', 'AND', 'OR', '==', '!=', '>', '<', '>=', '<=', ')', ','",
      "expecting: ')'",
      "expecting: ')', ','",
      "expecting: '=', '(', id",
      "expecting: '}'",
      "expecting: '+', '-', ')'",
      "expecting: '-', 'NOT', '(', ')', ',', id, integer, float, string",
      "expecting: ';'",
      "expecting: 'OR', ')'",
      "expecting: 'OR', ')', ','",
      "expecting: '}', 'if', 'else', 'while', id",
    };

    private static int[] errors = {
      0, 1, 2, 3, 0, 1, 1, 4, 3, 3, 5, 6, 7, 4, 8, 9, 
      10, 11, 11, 8, 12, 12, 12, 12, 13, 14, 15, 16, 17, 12, 12, 12, 
      12, 1, 18, 19, 6, 6, 20, 21, 10, 10, 10, 10, 10, 10, 12, 12, 
      22, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 19, 7, 
      9, 8, 8, 8, 23, 24, 2, 21, 12, 14, 15, 16, 16, 17, 17, 17, 
      17, 12, 12, 12, 12, 10, 18, 25, 25, 13, 18, 19, 26, 10, 21, 7, 
      7, 10, 24, 23, 3, 10, 10, 10, 18, 21, 21, 27, 10, 7, 10, 21, 
      10, 
    };
}
}
